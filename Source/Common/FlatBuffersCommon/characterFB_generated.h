// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERFB_FBCHARACTER_H_
#define FLATBUFFERS_GENERATED_CHARACTERFB_FBCHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "characterModelFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "skillFB_generated.h"
#include "attributeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbCharacter {

struct FB_Character;
struct FB_CharacterBuilder;

struct FB_Character FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTRIBUTES = 4,
    VT_SKILLS = 6,
    VT_WEAPONS = 8,
    VT_MODEL = 10,
    VT_ENTERED_NAME = 12,
    VT_TIME_DETECT = 14,
    VT_XP = 16,
    VT_XP_REWARD = 18,
    VT_RANGE_LEADER = 20,
    VT_CON_MAX = 22,
    VT_CON_CUR = 24,
    VT_CON_PER_LVL = 26,
    VT_MUL_CRIT_DMG = 28,
    VT_MUL_SPEED = 30,
    VT_MUL_THROW = 32,
    VT_CHA_HIT = 34,
    VT_CHA_HIT_AR = 36,
    VT_CHA_HIT_SMG = 38,
    VT_CHA_HIT_HMG = 40,
    VT_CHA_HIT_FT = 42,
    VT_CHA_HIT_BRAWL = 44,
    VT_CHA_HIT_BLUNT = 46,
    VT_CHA_HIT_BLADED = 48,
    VT_CHA_HIT_SA_PISTOL = 50,
    VT_CHA_HIT_REVOLVER = 52,
    VT_CHA_HIT_PUMP_SG = 54,
    VT_CHA_HIT_AUTO_SG = 56,
    VT_CHA_HIT_SR = 58,
    VT_CHA_HIT_NEARBY_ALLIES = 60,
    VT_CHA_CRIT_DMG_MULTI_KILL = 62,
    VT_CHA_CRIT_DMG = 64,
    VT_CHA_CRIT_HEAL = 66,
    VT_CHA_LUCK_ACTION = 68,
    VT_CHA_LUCK_CRIT_DMG = 70,
    VT_CHA_LUCK_MEGA_CRIT_DMG = 72,
    VT_CHA_LUCK_EVADE = 74,
    VT_CHA_LUCK_CRIT_RES = 76,
    VT_CHA_LUCK_DBL_HEAL = 78,
    VT_CHA_LUCK_DBL_MONEY = 80,
    VT_CHA_LUCK_DBL_SCRAP = 82,
    VT_BON_HEAL = 84,
    VT_BON_CRIT_HEAL = 86,
    VT_BON_HEAL_REVIVE = 88,
    VT_BON_REPAIR = 90,
    VT_BON_XP = 92,
    VT_BON_MISSION_REW = 94,
    VT_BON_SCRAP = 96,
    VT_BON_SELL_VALUE = 98,
    VT_BON_BUY_COST = 100,
    VT_BON_SNEAK_DMG = 102,
    VT_BON_NORM_DMG = 104,
    VT_BON_MELEE_DMG = 106,
    VT_BON_RANGE_DMG = 108,
    VT_BON_FIRE_DMG = 110,
    VT_BON_COLD_DMG = 112,
    VT_BON_ENER_DMG = 114,
    VT_BON_EXPL_DMG = 116,
    VT_BON_ANIMAL_DMG = 118,
    VT_BON_DMG_VS_ROBOT = 120,
    VT_BON_DMG_VS_VEHIC = 122,
    VT_BON_DMG_VS_SYNTH = 124,
    VT_BON_DMG_VS_ANIMAL = 126,
    VT_BON_DMG_VS_MUTANT = 128,
    VT_BON_NORM_DMG_BOSS_KILL = 130,
    VT_BON_CON_HEALED_REVIVE = 132,
    VT_RES_STAT_EFF = 134,
    VT_RES_CRIT_DMG = 136,
    VT_RES_FIRE_DMG = 138,
    VT_RES_COLD_DMG = 140,
    VT_RES_ENER_DMG = 142,
    VT_RES_EXPL_DMG = 144,
    VT_EVASION = 146,
    VT_INITIAT = 148,
    VT_STRIKE = 150,
    VT_LEVEL = 152,
    VT_ARMOR = 154,
    VT_ARMOR_PEN = 156,
    VT_AP_MAX = 158,
    VT_AP_CUR = 160,
    VT_MOV_DOWNED = 162,
    VT_PERCEPT = 164,
    VT_RAD_RES = 166
  };
  const fbAttribute::FB_Attribute *attributes() const {
    return GetPointer<const fbAttribute::FB_Attribute *>(VT_ATTRIBUTES);
  }
  const fbSkill::FB_Skill *skills() const {
    return GetPointer<const fbSkill::FB_Skill *>(VT_SKILLS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbWeapon::FB_Weapon>> *weapons() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbWeapon::FB_Weapon>> *>(VT_WEAPONS);
  }
  fbCharacter::FB_CharacterModel model() const {
    return static_cast<fbCharacter::FB_CharacterModel>(GetField<int16_t>(VT_MODEL, 0));
  }
  const flatbuffers::String *entered_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ENTERED_NAME);
  }
  int32_t time_detect() const {
    return GetField<int32_t>(VT_TIME_DETECT, 0);
  }
  int32_t xp() const {
    return GetField<int32_t>(VT_XP, 0);
  }
  int32_t xp_reward() const {
    return GetField<int32_t>(VT_XP_REWARD, 0);
  }
  int16_t range_leader() const {
    return GetField<int16_t>(VT_RANGE_LEADER, 0);
  }
  int16_t con_max() const {
    return GetField<int16_t>(VT_CON_MAX, 0);
  }
  int16_t con_cur() const {
    return GetField<int16_t>(VT_CON_CUR, 0);
  }
  int16_t con_per_lvl() const {
    return GetField<int16_t>(VT_CON_PER_LVL, 0);
  }
  int16_t mul_crit_dmg() const {
    return GetField<int16_t>(VT_MUL_CRIT_DMG, 0);
  }
  int16_t mul_speed() const {
    return GetField<int16_t>(VT_MUL_SPEED, 0);
  }
  int16_t mul_throw() const {
    return GetField<int16_t>(VT_MUL_THROW, 0);
  }
  int16_t cha_hit() const {
    return GetField<int16_t>(VT_CHA_HIT, 0);
  }
  int16_t cha_hit_ar() const {
    return GetField<int16_t>(VT_CHA_HIT_AR, 0);
  }
  int16_t cha_hit_smg() const {
    return GetField<int16_t>(VT_CHA_HIT_SMG, 0);
  }
  int16_t cha_hit_hmg() const {
    return GetField<int16_t>(VT_CHA_HIT_HMG, 0);
  }
  int16_t cha_hit_ft() const {
    return GetField<int16_t>(VT_CHA_HIT_FT, 0);
  }
  int16_t cha_hit_brawl() const {
    return GetField<int16_t>(VT_CHA_HIT_BRAWL, 0);
  }
  int16_t cha_hit_blunt() const {
    return GetField<int16_t>(VT_CHA_HIT_BLUNT, 0);
  }
  int16_t cha_hit_bladed() const {
    return GetField<int16_t>(VT_CHA_HIT_BLADED, 0);
  }
  int16_t cha_hit_sa_pistol() const {
    return GetField<int16_t>(VT_CHA_HIT_SA_PISTOL, 0);
  }
  int16_t cha_hit_revolver() const {
    return GetField<int16_t>(VT_CHA_HIT_REVOLVER, 0);
  }
  int16_t cha_hit_pump_sg() const {
    return GetField<int16_t>(VT_CHA_HIT_PUMP_SG, 0);
  }
  int16_t cha_hit_auto_sg() const {
    return GetField<int16_t>(VT_CHA_HIT_AUTO_SG, 0);
  }
  int16_t cha_hit_sr() const {
    return GetField<int16_t>(VT_CHA_HIT_SR, 0);
  }
  int16_t cha_hit_nearby_allies() const {
    return GetField<int16_t>(VT_CHA_HIT_NEARBY_ALLIES, 0);
  }
  int16_t cha_crit_dmg_multi_kill() const {
    return GetField<int16_t>(VT_CHA_CRIT_DMG_MULTI_KILL, 0);
  }
  int16_t cha_crit_dmg() const {
    return GetField<int16_t>(VT_CHA_CRIT_DMG, 0);
  }
  int16_t cha_crit_heal() const {
    return GetField<int16_t>(VT_CHA_CRIT_HEAL, 0);
  }
  int16_t cha_luck_action() const {
    return GetField<int16_t>(VT_CHA_LUCK_ACTION, 0);
  }
  int16_t cha_luck_crit_dmg() const {
    return GetField<int16_t>(VT_CHA_LUCK_CRIT_DMG, 0);
  }
  int16_t cha_luck_mega_crit_dmg() const {
    return GetField<int16_t>(VT_CHA_LUCK_MEGA_CRIT_DMG, 0);
  }
  int16_t cha_luck_evade() const {
    return GetField<int16_t>(VT_CHA_LUCK_EVADE, 0);
  }
  int16_t cha_luck_crit_res() const {
    return GetField<int16_t>(VT_CHA_LUCK_CRIT_RES, 0);
  }
  int16_t cha_luck_dbl_heal() const {
    return GetField<int16_t>(VT_CHA_LUCK_DBL_HEAL, 0);
  }
  int16_t cha_luck_dbl_money() const {
    return GetField<int16_t>(VT_CHA_LUCK_DBL_MONEY, 0);
  }
  int16_t cha_luck_dbl_scrap() const {
    return GetField<int16_t>(VT_CHA_LUCK_DBL_SCRAP, 0);
  }
  int16_t bon_heal() const {
    return GetField<int16_t>(VT_BON_HEAL, 0);
  }
  int16_t bon_crit_heal() const {
    return GetField<int16_t>(VT_BON_CRIT_HEAL, 0);
  }
  int16_t bon_heal_revive() const {
    return GetField<int16_t>(VT_BON_HEAL_REVIVE, 0);
  }
  int16_t bon_repair() const {
    return GetField<int16_t>(VT_BON_REPAIR, 0);
  }
  int16_t bon_xp() const {
    return GetField<int16_t>(VT_BON_XP, 0);
  }
  int16_t bon_mission_rew() const {
    return GetField<int16_t>(VT_BON_MISSION_REW, 0);
  }
  int16_t bon_scrap() const {
    return GetField<int16_t>(VT_BON_SCRAP, 0);
  }
  int16_t bon_sell_value() const {
    return GetField<int16_t>(VT_BON_SELL_VALUE, 0);
  }
  int16_t bon_buy_cost() const {
    return GetField<int16_t>(VT_BON_BUY_COST, 0);
  }
  int16_t bon_sneak_dmg() const {
    return GetField<int16_t>(VT_BON_SNEAK_DMG, 0);
  }
  int16_t bon_norm_dmg() const {
    return GetField<int16_t>(VT_BON_NORM_DMG, 0);
  }
  int16_t bon_melee_dmg() const {
    return GetField<int16_t>(VT_BON_MELEE_DMG, 0);
  }
  int16_t bon_range_dmg() const {
    return GetField<int16_t>(VT_BON_RANGE_DMG, 0);
  }
  int16_t bon_fire_dmg() const {
    return GetField<int16_t>(VT_BON_FIRE_DMG, 0);
  }
  int16_t bon_cold_dmg() const {
    return GetField<int16_t>(VT_BON_COLD_DMG, 0);
  }
  int16_t bon_ener_dmg() const {
    return GetField<int16_t>(VT_BON_ENER_DMG, 0);
  }
  int16_t bon_expl_dmg() const {
    return GetField<int16_t>(VT_BON_EXPL_DMG, 0);
  }
  int16_t bon_animal_dmg() const {
    return GetField<int16_t>(VT_BON_ANIMAL_DMG, 0);
  }
  int16_t bon_dmg_vs_robot() const {
    return GetField<int16_t>(VT_BON_DMG_VS_ROBOT, 0);
  }
  int16_t bon_dmg_vs_vehic() const {
    return GetField<int16_t>(VT_BON_DMG_VS_VEHIC, 0);
  }
  int16_t bon_dmg_vs_synth() const {
    return GetField<int16_t>(VT_BON_DMG_VS_SYNTH, 0);
  }
  int16_t bon_dmg_vs_animal() const {
    return GetField<int16_t>(VT_BON_DMG_VS_ANIMAL, 0);
  }
  int16_t bon_dmg_vs_mutant() const {
    return GetField<int16_t>(VT_BON_DMG_VS_MUTANT, 0);
  }
  int16_t bon_norm_dmg_boss_kill() const {
    return GetField<int16_t>(VT_BON_NORM_DMG_BOSS_KILL, 0);
  }
  int16_t bon_con_healed_revive() const {
    return GetField<int16_t>(VT_BON_CON_HEALED_REVIVE, 0);
  }
  int16_t res_stat_eff() const {
    return GetField<int16_t>(VT_RES_STAT_EFF, 0);
  }
  int16_t res_crit_dmg() const {
    return GetField<int16_t>(VT_RES_CRIT_DMG, 0);
  }
  int16_t res_fire_dmg() const {
    return GetField<int16_t>(VT_RES_FIRE_DMG, 0);
  }
  int16_t res_cold_dmg() const {
    return GetField<int16_t>(VT_RES_COLD_DMG, 0);
  }
  int16_t res_ener_dmg() const {
    return GetField<int16_t>(VT_RES_ENER_DMG, 0);
  }
  int16_t res_expl_dmg() const {
    return GetField<int16_t>(VT_RES_EXPL_DMG, 0);
  }
  int16_t evasion() const {
    return GetField<int16_t>(VT_EVASION, 0);
  }
  int16_t initiat() const {
    return GetField<int16_t>(VT_INITIAT, 0);
  }
  int16_t strike() const {
    return GetField<int16_t>(VT_STRIKE, 0);
  }
  int8_t level() const {
    return GetField<int8_t>(VT_LEVEL, 0);
  }
  int8_t armor() const {
    return GetField<int8_t>(VT_ARMOR, 0);
  }
  int8_t armor_pen() const {
    return GetField<int8_t>(VT_ARMOR_PEN, 0);
  }
  int8_t ap_max() const {
    return GetField<int8_t>(VT_AP_MAX, 0);
  }
  int8_t ap_cur() const {
    return GetField<int8_t>(VT_AP_CUR, 0);
  }
  int8_t mov_downed() const {
    return GetField<int8_t>(VT_MOV_DOWNED, 0);
  }
  int8_t percept() const {
    return GetField<int8_t>(VT_PERCEPT, 0);
  }
  int8_t rad_res() const {
    return GetField<int8_t>(VT_RAD_RES, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyTable(attributes()) &&
           VerifyOffset(verifier, VT_SKILLS) &&
           verifier.VerifyTable(skills()) &&
           VerifyOffset(verifier, VT_WEAPONS) &&
           verifier.VerifyVector(weapons()) &&
           verifier.VerifyVectorOfTables(weapons()) &&
           VerifyField<int16_t>(verifier, VT_MODEL) &&
           VerifyOffset(verifier, VT_ENTERED_NAME) &&
           verifier.VerifyString(entered_name()) &&
           VerifyField<int32_t>(verifier, VT_TIME_DETECT) &&
           VerifyField<int32_t>(verifier, VT_XP) &&
           VerifyField<int32_t>(verifier, VT_XP_REWARD) &&
           VerifyField<int16_t>(verifier, VT_RANGE_LEADER) &&
           VerifyField<int16_t>(verifier, VT_CON_MAX) &&
           VerifyField<int16_t>(verifier, VT_CON_CUR) &&
           VerifyField<int16_t>(verifier, VT_CON_PER_LVL) &&
           VerifyField<int16_t>(verifier, VT_MUL_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_MUL_SPEED) &&
           VerifyField<int16_t>(verifier, VT_MUL_THROW) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_AR) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_SMG) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_HMG) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_FT) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_BRAWL) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_BLUNT) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_BLADED) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_SA_PISTOL) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_REVOLVER) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_PUMP_SG) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_AUTO_SG) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_SR) &&
           VerifyField<int16_t>(verifier, VT_CHA_HIT_NEARBY_ALLIES) &&
           VerifyField<int16_t>(verifier, VT_CHA_CRIT_DMG_MULTI_KILL) &&
           VerifyField<int16_t>(verifier, VT_CHA_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHA_CRIT_HEAL) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_ACTION) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_MEGA_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_EVADE) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_CRIT_RES) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_DBL_HEAL) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_DBL_MONEY) &&
           VerifyField<int16_t>(verifier, VT_CHA_LUCK_DBL_SCRAP) &&
           VerifyField<int16_t>(verifier, VT_BON_HEAL) &&
           VerifyField<int16_t>(verifier, VT_BON_CRIT_HEAL) &&
           VerifyField<int16_t>(verifier, VT_BON_HEAL_REVIVE) &&
           VerifyField<int16_t>(verifier, VT_BON_REPAIR) &&
           VerifyField<int16_t>(verifier, VT_BON_XP) &&
           VerifyField<int16_t>(verifier, VT_BON_MISSION_REW) &&
           VerifyField<int16_t>(verifier, VT_BON_SCRAP) &&
           VerifyField<int16_t>(verifier, VT_BON_SELL_VALUE) &&
           VerifyField<int16_t>(verifier, VT_BON_BUY_COST) &&
           VerifyField<int16_t>(verifier, VT_BON_SNEAK_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_NORM_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_MELEE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_RANGE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_FIRE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_COLD_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_ENER_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_EXPL_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_ANIMAL_DMG) &&
           VerifyField<int16_t>(verifier, VT_BON_DMG_VS_ROBOT) &&
           VerifyField<int16_t>(verifier, VT_BON_DMG_VS_VEHIC) &&
           VerifyField<int16_t>(verifier, VT_BON_DMG_VS_SYNTH) &&
           VerifyField<int16_t>(verifier, VT_BON_DMG_VS_ANIMAL) &&
           VerifyField<int16_t>(verifier, VT_BON_DMG_VS_MUTANT) &&
           VerifyField<int16_t>(verifier, VT_BON_NORM_DMG_BOSS_KILL) &&
           VerifyField<int16_t>(verifier, VT_BON_CON_HEALED_REVIVE) &&
           VerifyField<int16_t>(verifier, VT_RES_STAT_EFF) &&
           VerifyField<int16_t>(verifier, VT_RES_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_FIRE_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_COLD_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_ENER_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_EXPL_DMG) &&
           VerifyField<int16_t>(verifier, VT_EVASION) &&
           VerifyField<int16_t>(verifier, VT_INITIAT) &&
           VerifyField<int16_t>(verifier, VT_STRIKE) &&
           VerifyField<int8_t>(verifier, VT_LEVEL) &&
           VerifyField<int8_t>(verifier, VT_ARMOR) &&
           VerifyField<int8_t>(verifier, VT_ARMOR_PEN) &&
           VerifyField<int8_t>(verifier, VT_AP_MAX) &&
           VerifyField<int8_t>(verifier, VT_AP_CUR) &&
           VerifyField<int8_t>(verifier, VT_MOV_DOWNED) &&
           VerifyField<int8_t>(verifier, VT_PERCEPT) &&
           VerifyField<int8_t>(verifier, VT_RAD_RES) &&
           verifier.EndTable();
  }
};

struct FB_CharacterBuilder {
  typedef FB_Character Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_attributes(flatbuffers::Offset<fbAttribute::FB_Attribute> attributes) {
    fbb_.AddOffset(FB_Character::VT_ATTRIBUTES, attributes);
  }
  void add_skills(flatbuffers::Offset<fbSkill::FB_Skill> skills) {
    fbb_.AddOffset(FB_Character::VT_SKILLS, skills);
  }
  void add_weapons(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbWeapon::FB_Weapon>>> weapons) {
    fbb_.AddOffset(FB_Character::VT_WEAPONS, weapons);
  }
  void add_model(fbCharacter::FB_CharacterModel model) {
    fbb_.AddElement<int16_t>(FB_Character::VT_MODEL, static_cast<int16_t>(model), 0);
  }
  void add_entered_name(flatbuffers::Offset<flatbuffers::String> entered_name) {
    fbb_.AddOffset(FB_Character::VT_ENTERED_NAME, entered_name);
  }
  void add_time_detect(int32_t time_detect) {
    fbb_.AddElement<int32_t>(FB_Character::VT_TIME_DETECT, time_detect, 0);
  }
  void add_xp(int32_t xp) {
    fbb_.AddElement<int32_t>(FB_Character::VT_XP, xp, 0);
  }
  void add_xp_reward(int32_t xp_reward) {
    fbb_.AddElement<int32_t>(FB_Character::VT_XP_REWARD, xp_reward, 0);
  }
  void add_range_leader(int16_t range_leader) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RANGE_LEADER, range_leader, 0);
  }
  void add_con_max(int16_t con_max) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CON_MAX, con_max, 0);
  }
  void add_con_cur(int16_t con_cur) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CON_CUR, con_cur, 0);
  }
  void add_con_per_lvl(int16_t con_per_lvl) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CON_PER_LVL, con_per_lvl, 0);
  }
  void add_mul_crit_dmg(int16_t mul_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_MUL_CRIT_DMG, mul_crit_dmg, 0);
  }
  void add_mul_speed(int16_t mul_speed) {
    fbb_.AddElement<int16_t>(FB_Character::VT_MUL_SPEED, mul_speed, 0);
  }
  void add_mul_throw(int16_t mul_throw) {
    fbb_.AddElement<int16_t>(FB_Character::VT_MUL_THROW, mul_throw, 0);
  }
  void add_cha_hit(int16_t cha_hit) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT, cha_hit, 0);
  }
  void add_cha_hit_ar(int16_t cha_hit_ar) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_AR, cha_hit_ar, 0);
  }
  void add_cha_hit_smg(int16_t cha_hit_smg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_SMG, cha_hit_smg, 0);
  }
  void add_cha_hit_hmg(int16_t cha_hit_hmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_HMG, cha_hit_hmg, 0);
  }
  void add_cha_hit_ft(int16_t cha_hit_ft) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_FT, cha_hit_ft, 0);
  }
  void add_cha_hit_brawl(int16_t cha_hit_brawl) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_BRAWL, cha_hit_brawl, 0);
  }
  void add_cha_hit_blunt(int16_t cha_hit_blunt) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_BLUNT, cha_hit_blunt, 0);
  }
  void add_cha_hit_bladed(int16_t cha_hit_bladed) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_BLADED, cha_hit_bladed, 0);
  }
  void add_cha_hit_sa_pistol(int16_t cha_hit_sa_pistol) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_SA_PISTOL, cha_hit_sa_pistol, 0);
  }
  void add_cha_hit_revolver(int16_t cha_hit_revolver) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_REVOLVER, cha_hit_revolver, 0);
  }
  void add_cha_hit_pump_sg(int16_t cha_hit_pump_sg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_PUMP_SG, cha_hit_pump_sg, 0);
  }
  void add_cha_hit_auto_sg(int16_t cha_hit_auto_sg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_AUTO_SG, cha_hit_auto_sg, 0);
  }
  void add_cha_hit_sr(int16_t cha_hit_sr) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_SR, cha_hit_sr, 0);
  }
  void add_cha_hit_nearby_allies(int16_t cha_hit_nearby_allies) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_HIT_NEARBY_ALLIES, cha_hit_nearby_allies, 0);
  }
  void add_cha_crit_dmg_multi_kill(int16_t cha_crit_dmg_multi_kill) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_CRIT_DMG_MULTI_KILL, cha_crit_dmg_multi_kill, 0);
  }
  void add_cha_crit_dmg(int16_t cha_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_CRIT_DMG, cha_crit_dmg, 0);
  }
  void add_cha_crit_heal(int16_t cha_crit_heal) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_CRIT_HEAL, cha_crit_heal, 0);
  }
  void add_cha_luck_action(int16_t cha_luck_action) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_ACTION, cha_luck_action, 0);
  }
  void add_cha_luck_crit_dmg(int16_t cha_luck_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_CRIT_DMG, cha_luck_crit_dmg, 0);
  }
  void add_cha_luck_mega_crit_dmg(int16_t cha_luck_mega_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_MEGA_CRIT_DMG, cha_luck_mega_crit_dmg, 0);
  }
  void add_cha_luck_evade(int16_t cha_luck_evade) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_EVADE, cha_luck_evade, 0);
  }
  void add_cha_luck_crit_res(int16_t cha_luck_crit_res) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_CRIT_RES, cha_luck_crit_res, 0);
  }
  void add_cha_luck_dbl_heal(int16_t cha_luck_dbl_heal) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_DBL_HEAL, cha_luck_dbl_heal, 0);
  }
  void add_cha_luck_dbl_money(int16_t cha_luck_dbl_money) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_DBL_MONEY, cha_luck_dbl_money, 0);
  }
  void add_cha_luck_dbl_scrap(int16_t cha_luck_dbl_scrap) {
    fbb_.AddElement<int16_t>(FB_Character::VT_CHA_LUCK_DBL_SCRAP, cha_luck_dbl_scrap, 0);
  }
  void add_bon_heal(int16_t bon_heal) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_HEAL, bon_heal, 0);
  }
  void add_bon_crit_heal(int16_t bon_crit_heal) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_CRIT_HEAL, bon_crit_heal, 0);
  }
  void add_bon_heal_revive(int16_t bon_heal_revive) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_HEAL_REVIVE, bon_heal_revive, 0);
  }
  void add_bon_repair(int16_t bon_repair) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_REPAIR, bon_repair, 0);
  }
  void add_bon_xp(int16_t bon_xp) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_XP, bon_xp, 0);
  }
  void add_bon_mission_rew(int16_t bon_mission_rew) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_MISSION_REW, bon_mission_rew, 0);
  }
  void add_bon_scrap(int16_t bon_scrap) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_SCRAP, bon_scrap, 0);
  }
  void add_bon_sell_value(int16_t bon_sell_value) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_SELL_VALUE, bon_sell_value, 0);
  }
  void add_bon_buy_cost(int16_t bon_buy_cost) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_BUY_COST, bon_buy_cost, 0);
  }
  void add_bon_sneak_dmg(int16_t bon_sneak_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_SNEAK_DMG, bon_sneak_dmg, 0);
  }
  void add_bon_norm_dmg(int16_t bon_norm_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_NORM_DMG, bon_norm_dmg, 0);
  }
  void add_bon_melee_dmg(int16_t bon_melee_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_MELEE_DMG, bon_melee_dmg, 0);
  }
  void add_bon_range_dmg(int16_t bon_range_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_RANGE_DMG, bon_range_dmg, 0);
  }
  void add_bon_fire_dmg(int16_t bon_fire_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_FIRE_DMG, bon_fire_dmg, 0);
  }
  void add_bon_cold_dmg(int16_t bon_cold_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_COLD_DMG, bon_cold_dmg, 0);
  }
  void add_bon_ener_dmg(int16_t bon_ener_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_ENER_DMG, bon_ener_dmg, 0);
  }
  void add_bon_expl_dmg(int16_t bon_expl_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_EXPL_DMG, bon_expl_dmg, 0);
  }
  void add_bon_animal_dmg(int16_t bon_animal_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_ANIMAL_DMG, bon_animal_dmg, 0);
  }
  void add_bon_dmg_vs_robot(int16_t bon_dmg_vs_robot) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_DMG_VS_ROBOT, bon_dmg_vs_robot, 0);
  }
  void add_bon_dmg_vs_vehic(int16_t bon_dmg_vs_vehic) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_DMG_VS_VEHIC, bon_dmg_vs_vehic, 0);
  }
  void add_bon_dmg_vs_synth(int16_t bon_dmg_vs_synth) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_DMG_VS_SYNTH, bon_dmg_vs_synth, 0);
  }
  void add_bon_dmg_vs_animal(int16_t bon_dmg_vs_animal) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_DMG_VS_ANIMAL, bon_dmg_vs_animal, 0);
  }
  void add_bon_dmg_vs_mutant(int16_t bon_dmg_vs_mutant) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_DMG_VS_MUTANT, bon_dmg_vs_mutant, 0);
  }
  void add_bon_norm_dmg_boss_kill(int16_t bon_norm_dmg_boss_kill) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_NORM_DMG_BOSS_KILL, bon_norm_dmg_boss_kill, 0);
  }
  void add_bon_con_healed_revive(int16_t bon_con_healed_revive) {
    fbb_.AddElement<int16_t>(FB_Character::VT_BON_CON_HEALED_REVIVE, bon_con_healed_revive, 0);
  }
  void add_res_stat_eff(int16_t res_stat_eff) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_STAT_EFF, res_stat_eff, 0);
  }
  void add_res_crit_dmg(int16_t res_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_CRIT_DMG, res_crit_dmg, 0);
  }
  void add_res_fire_dmg(int16_t res_fire_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_FIRE_DMG, res_fire_dmg, 0);
  }
  void add_res_cold_dmg(int16_t res_cold_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_COLD_DMG, res_cold_dmg, 0);
  }
  void add_res_ener_dmg(int16_t res_ener_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_ENER_DMG, res_ener_dmg, 0);
  }
  void add_res_expl_dmg(int16_t res_expl_dmg) {
    fbb_.AddElement<int16_t>(FB_Character::VT_RES_EXPL_DMG, res_expl_dmg, 0);
  }
  void add_evasion(int16_t evasion) {
    fbb_.AddElement<int16_t>(FB_Character::VT_EVASION, evasion, 0);
  }
  void add_initiat(int16_t initiat) {
    fbb_.AddElement<int16_t>(FB_Character::VT_INITIAT, initiat, 0);
  }
  void add_strike(int16_t strike) {
    fbb_.AddElement<int16_t>(FB_Character::VT_STRIKE, strike, 0);
  }
  void add_level(int8_t level) {
    fbb_.AddElement<int8_t>(FB_Character::VT_LEVEL, level, 0);
  }
  void add_armor(int8_t armor) {
    fbb_.AddElement<int8_t>(FB_Character::VT_ARMOR, armor, 0);
  }
  void add_armor_pen(int8_t armor_pen) {
    fbb_.AddElement<int8_t>(FB_Character::VT_ARMOR_PEN, armor_pen, 0);
  }
  void add_ap_max(int8_t ap_max) {
    fbb_.AddElement<int8_t>(FB_Character::VT_AP_MAX, ap_max, 0);
  }
  void add_ap_cur(int8_t ap_cur) {
    fbb_.AddElement<int8_t>(FB_Character::VT_AP_CUR, ap_cur, 0);
  }
  void add_mov_downed(int8_t mov_downed) {
    fbb_.AddElement<int8_t>(FB_Character::VT_MOV_DOWNED, mov_downed, 0);
  }
  void add_percept(int8_t percept) {
    fbb_.AddElement<int8_t>(FB_Character::VT_PERCEPT, percept, 0);
  }
  void add_rad_res(int8_t rad_res) {
    fbb_.AddElement<int8_t>(FB_Character::VT_RAD_RES, rad_res, 0);
  }
  explicit FB_CharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Character> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Character>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Character> CreateFB_Character(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttribute::FB_Attribute> attributes = 0,
    flatbuffers::Offset<fbSkill::FB_Skill> skills = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbWeapon::FB_Weapon>>> weapons = 0,
    fbCharacter::FB_CharacterModel model = fbCharacter::FB_CharacterModel_INVALID,
    flatbuffers::Offset<flatbuffers::String> entered_name = 0,
    int32_t time_detect = 0,
    int32_t xp = 0,
    int32_t xp_reward = 0,
    int16_t range_leader = 0,
    int16_t con_max = 0,
    int16_t con_cur = 0,
    int16_t con_per_lvl = 0,
    int16_t mul_crit_dmg = 0,
    int16_t mul_speed = 0,
    int16_t mul_throw = 0,
    int16_t cha_hit = 0,
    int16_t cha_hit_ar = 0,
    int16_t cha_hit_smg = 0,
    int16_t cha_hit_hmg = 0,
    int16_t cha_hit_ft = 0,
    int16_t cha_hit_brawl = 0,
    int16_t cha_hit_blunt = 0,
    int16_t cha_hit_bladed = 0,
    int16_t cha_hit_sa_pistol = 0,
    int16_t cha_hit_revolver = 0,
    int16_t cha_hit_pump_sg = 0,
    int16_t cha_hit_auto_sg = 0,
    int16_t cha_hit_sr = 0,
    int16_t cha_hit_nearby_allies = 0,
    int16_t cha_crit_dmg_multi_kill = 0,
    int16_t cha_crit_dmg = 0,
    int16_t cha_crit_heal = 0,
    int16_t cha_luck_action = 0,
    int16_t cha_luck_crit_dmg = 0,
    int16_t cha_luck_mega_crit_dmg = 0,
    int16_t cha_luck_evade = 0,
    int16_t cha_luck_crit_res = 0,
    int16_t cha_luck_dbl_heal = 0,
    int16_t cha_luck_dbl_money = 0,
    int16_t cha_luck_dbl_scrap = 0,
    int16_t bon_heal = 0,
    int16_t bon_crit_heal = 0,
    int16_t bon_heal_revive = 0,
    int16_t bon_repair = 0,
    int16_t bon_xp = 0,
    int16_t bon_mission_rew = 0,
    int16_t bon_scrap = 0,
    int16_t bon_sell_value = 0,
    int16_t bon_buy_cost = 0,
    int16_t bon_sneak_dmg = 0,
    int16_t bon_norm_dmg = 0,
    int16_t bon_melee_dmg = 0,
    int16_t bon_range_dmg = 0,
    int16_t bon_fire_dmg = 0,
    int16_t bon_cold_dmg = 0,
    int16_t bon_ener_dmg = 0,
    int16_t bon_expl_dmg = 0,
    int16_t bon_animal_dmg = 0,
    int16_t bon_dmg_vs_robot = 0,
    int16_t bon_dmg_vs_vehic = 0,
    int16_t bon_dmg_vs_synth = 0,
    int16_t bon_dmg_vs_animal = 0,
    int16_t bon_dmg_vs_mutant = 0,
    int16_t bon_norm_dmg_boss_kill = 0,
    int16_t bon_con_healed_revive = 0,
    int16_t res_stat_eff = 0,
    int16_t res_crit_dmg = 0,
    int16_t res_fire_dmg = 0,
    int16_t res_cold_dmg = 0,
    int16_t res_ener_dmg = 0,
    int16_t res_expl_dmg = 0,
    int16_t evasion = 0,
    int16_t initiat = 0,
    int16_t strike = 0,
    int8_t level = 0,
    int8_t armor = 0,
    int8_t armor_pen = 0,
    int8_t ap_max = 0,
    int8_t ap_cur = 0,
    int8_t mov_downed = 0,
    int8_t percept = 0,
    int8_t rad_res = 0) {
  FB_CharacterBuilder builder_(_fbb);
  builder_.add_xp_reward(xp_reward);
  builder_.add_xp(xp);
  builder_.add_time_detect(time_detect);
  builder_.add_entered_name(entered_name);
  builder_.add_weapons(weapons);
  builder_.add_skills(skills);
  builder_.add_attributes(attributes);
  builder_.add_strike(strike);
  builder_.add_initiat(initiat);
  builder_.add_evasion(evasion);
  builder_.add_res_expl_dmg(res_expl_dmg);
  builder_.add_res_ener_dmg(res_ener_dmg);
  builder_.add_res_cold_dmg(res_cold_dmg);
  builder_.add_res_fire_dmg(res_fire_dmg);
  builder_.add_res_crit_dmg(res_crit_dmg);
  builder_.add_res_stat_eff(res_stat_eff);
  builder_.add_bon_con_healed_revive(bon_con_healed_revive);
  builder_.add_bon_norm_dmg_boss_kill(bon_norm_dmg_boss_kill);
  builder_.add_bon_dmg_vs_mutant(bon_dmg_vs_mutant);
  builder_.add_bon_dmg_vs_animal(bon_dmg_vs_animal);
  builder_.add_bon_dmg_vs_synth(bon_dmg_vs_synth);
  builder_.add_bon_dmg_vs_vehic(bon_dmg_vs_vehic);
  builder_.add_bon_dmg_vs_robot(bon_dmg_vs_robot);
  builder_.add_bon_animal_dmg(bon_animal_dmg);
  builder_.add_bon_expl_dmg(bon_expl_dmg);
  builder_.add_bon_ener_dmg(bon_ener_dmg);
  builder_.add_bon_cold_dmg(bon_cold_dmg);
  builder_.add_bon_fire_dmg(bon_fire_dmg);
  builder_.add_bon_range_dmg(bon_range_dmg);
  builder_.add_bon_melee_dmg(bon_melee_dmg);
  builder_.add_bon_norm_dmg(bon_norm_dmg);
  builder_.add_bon_sneak_dmg(bon_sneak_dmg);
  builder_.add_bon_buy_cost(bon_buy_cost);
  builder_.add_bon_sell_value(bon_sell_value);
  builder_.add_bon_scrap(bon_scrap);
  builder_.add_bon_mission_rew(bon_mission_rew);
  builder_.add_bon_xp(bon_xp);
  builder_.add_bon_repair(bon_repair);
  builder_.add_bon_heal_revive(bon_heal_revive);
  builder_.add_bon_crit_heal(bon_crit_heal);
  builder_.add_bon_heal(bon_heal);
  builder_.add_cha_luck_dbl_scrap(cha_luck_dbl_scrap);
  builder_.add_cha_luck_dbl_money(cha_luck_dbl_money);
  builder_.add_cha_luck_dbl_heal(cha_luck_dbl_heal);
  builder_.add_cha_luck_crit_res(cha_luck_crit_res);
  builder_.add_cha_luck_evade(cha_luck_evade);
  builder_.add_cha_luck_mega_crit_dmg(cha_luck_mega_crit_dmg);
  builder_.add_cha_luck_crit_dmg(cha_luck_crit_dmg);
  builder_.add_cha_luck_action(cha_luck_action);
  builder_.add_cha_crit_heal(cha_crit_heal);
  builder_.add_cha_crit_dmg(cha_crit_dmg);
  builder_.add_cha_crit_dmg_multi_kill(cha_crit_dmg_multi_kill);
  builder_.add_cha_hit_nearby_allies(cha_hit_nearby_allies);
  builder_.add_cha_hit_sr(cha_hit_sr);
  builder_.add_cha_hit_auto_sg(cha_hit_auto_sg);
  builder_.add_cha_hit_pump_sg(cha_hit_pump_sg);
  builder_.add_cha_hit_revolver(cha_hit_revolver);
  builder_.add_cha_hit_sa_pistol(cha_hit_sa_pistol);
  builder_.add_cha_hit_bladed(cha_hit_bladed);
  builder_.add_cha_hit_blunt(cha_hit_blunt);
  builder_.add_cha_hit_brawl(cha_hit_brawl);
  builder_.add_cha_hit_ft(cha_hit_ft);
  builder_.add_cha_hit_hmg(cha_hit_hmg);
  builder_.add_cha_hit_smg(cha_hit_smg);
  builder_.add_cha_hit_ar(cha_hit_ar);
  builder_.add_cha_hit(cha_hit);
  builder_.add_mul_throw(mul_throw);
  builder_.add_mul_speed(mul_speed);
  builder_.add_mul_crit_dmg(mul_crit_dmg);
  builder_.add_con_per_lvl(con_per_lvl);
  builder_.add_con_cur(con_cur);
  builder_.add_con_max(con_max);
  builder_.add_range_leader(range_leader);
  builder_.add_model(model);
  builder_.add_rad_res(rad_res);
  builder_.add_percept(percept);
  builder_.add_mov_downed(mov_downed);
  builder_.add_ap_cur(ap_cur);
  builder_.add_ap_max(ap_max);
  builder_.add_armor_pen(armor_pen);
  builder_.add_armor(armor);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_Character> CreateFB_CharacterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttribute::FB_Attribute> attributes = 0,
    flatbuffers::Offset<fbSkill::FB_Skill> skills = 0,
    const std::vector<flatbuffers::Offset<fbWeapon::FB_Weapon>> *weapons = nullptr,
    fbCharacter::FB_CharacterModel model = fbCharacter::FB_CharacterModel_INVALID,
    const char *entered_name = nullptr,
    int32_t time_detect = 0,
    int32_t xp = 0,
    int32_t xp_reward = 0,
    int16_t range_leader = 0,
    int16_t con_max = 0,
    int16_t con_cur = 0,
    int16_t con_per_lvl = 0,
    int16_t mul_crit_dmg = 0,
    int16_t mul_speed = 0,
    int16_t mul_throw = 0,
    int16_t cha_hit = 0,
    int16_t cha_hit_ar = 0,
    int16_t cha_hit_smg = 0,
    int16_t cha_hit_hmg = 0,
    int16_t cha_hit_ft = 0,
    int16_t cha_hit_brawl = 0,
    int16_t cha_hit_blunt = 0,
    int16_t cha_hit_bladed = 0,
    int16_t cha_hit_sa_pistol = 0,
    int16_t cha_hit_revolver = 0,
    int16_t cha_hit_pump_sg = 0,
    int16_t cha_hit_auto_sg = 0,
    int16_t cha_hit_sr = 0,
    int16_t cha_hit_nearby_allies = 0,
    int16_t cha_crit_dmg_multi_kill = 0,
    int16_t cha_crit_dmg = 0,
    int16_t cha_crit_heal = 0,
    int16_t cha_luck_action = 0,
    int16_t cha_luck_crit_dmg = 0,
    int16_t cha_luck_mega_crit_dmg = 0,
    int16_t cha_luck_evade = 0,
    int16_t cha_luck_crit_res = 0,
    int16_t cha_luck_dbl_heal = 0,
    int16_t cha_luck_dbl_money = 0,
    int16_t cha_luck_dbl_scrap = 0,
    int16_t bon_heal = 0,
    int16_t bon_crit_heal = 0,
    int16_t bon_heal_revive = 0,
    int16_t bon_repair = 0,
    int16_t bon_xp = 0,
    int16_t bon_mission_rew = 0,
    int16_t bon_scrap = 0,
    int16_t bon_sell_value = 0,
    int16_t bon_buy_cost = 0,
    int16_t bon_sneak_dmg = 0,
    int16_t bon_norm_dmg = 0,
    int16_t bon_melee_dmg = 0,
    int16_t bon_range_dmg = 0,
    int16_t bon_fire_dmg = 0,
    int16_t bon_cold_dmg = 0,
    int16_t bon_ener_dmg = 0,
    int16_t bon_expl_dmg = 0,
    int16_t bon_animal_dmg = 0,
    int16_t bon_dmg_vs_robot = 0,
    int16_t bon_dmg_vs_vehic = 0,
    int16_t bon_dmg_vs_synth = 0,
    int16_t bon_dmg_vs_animal = 0,
    int16_t bon_dmg_vs_mutant = 0,
    int16_t bon_norm_dmg_boss_kill = 0,
    int16_t bon_con_healed_revive = 0,
    int16_t res_stat_eff = 0,
    int16_t res_crit_dmg = 0,
    int16_t res_fire_dmg = 0,
    int16_t res_cold_dmg = 0,
    int16_t res_ener_dmg = 0,
    int16_t res_expl_dmg = 0,
    int16_t evasion = 0,
    int16_t initiat = 0,
    int16_t strike = 0,
    int8_t level = 0,
    int8_t armor = 0,
    int8_t armor_pen = 0,
    int8_t ap_max = 0,
    int8_t ap_cur = 0,
    int8_t mov_downed = 0,
    int8_t percept = 0,
    int8_t rad_res = 0) {
  auto weapons__ = weapons ? _fbb.CreateVector<flatbuffers::Offset<fbWeapon::FB_Weapon>>(*weapons) : 0;
  auto entered_name__ = entered_name ? _fbb.CreateString(entered_name) : 0;
  return fbCharacter::CreateFB_Character(
      _fbb,
      attributes,
      skills,
      weapons__,
      model,
      entered_name__,
      time_detect,
      xp,
      xp_reward,
      range_leader,
      con_max,
      con_cur,
      con_per_lvl,
      mul_crit_dmg,
      mul_speed,
      mul_throw,
      cha_hit,
      cha_hit_ar,
      cha_hit_smg,
      cha_hit_hmg,
      cha_hit_ft,
      cha_hit_brawl,
      cha_hit_blunt,
      cha_hit_bladed,
      cha_hit_sa_pistol,
      cha_hit_revolver,
      cha_hit_pump_sg,
      cha_hit_auto_sg,
      cha_hit_sr,
      cha_hit_nearby_allies,
      cha_crit_dmg_multi_kill,
      cha_crit_dmg,
      cha_crit_heal,
      cha_luck_action,
      cha_luck_crit_dmg,
      cha_luck_mega_crit_dmg,
      cha_luck_evade,
      cha_luck_crit_res,
      cha_luck_dbl_heal,
      cha_luck_dbl_money,
      cha_luck_dbl_scrap,
      bon_heal,
      bon_crit_heal,
      bon_heal_revive,
      bon_repair,
      bon_xp,
      bon_mission_rew,
      bon_scrap,
      bon_sell_value,
      bon_buy_cost,
      bon_sneak_dmg,
      bon_norm_dmg,
      bon_melee_dmg,
      bon_range_dmg,
      bon_fire_dmg,
      bon_cold_dmg,
      bon_ener_dmg,
      bon_expl_dmg,
      bon_animal_dmg,
      bon_dmg_vs_robot,
      bon_dmg_vs_vehic,
      bon_dmg_vs_synth,
      bon_dmg_vs_animal,
      bon_dmg_vs_mutant,
      bon_norm_dmg_boss_kill,
      bon_con_healed_revive,
      res_stat_eff,
      res_crit_dmg,
      res_fire_dmg,
      res_cold_dmg,
      res_ener_dmg,
      res_expl_dmg,
      evasion,
      initiat,
      strike,
      level,
      armor,
      armor_pen,
      ap_max,
      ap_cur,
      mov_downed,
      percept,
      rad_res);
}

}  // namespace fbCharacter

#endif  // FLATBUFFERS_GENERATED_CHARACTERFB_FBCHARACTER_H_
