// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INVENTORYFB_FBINVENTORY_H_
#define FLATBUFFERS_GENERATED_INVENTORYFB_FBINVENTORY_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "itemFB_generated.h"
#include "ammoFB_generated.h"
#include "ammoTypeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbInventory {

struct FB_Inventory;
struct FB_InventoryBuilder;

struct FB_Inventory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_InventoryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_ITEMS = 4,
    VT_OLD_ITEMS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>> *new_items() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>> *>(VT_NEW_ITEMS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>> *old_items() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>> *>(VT_OLD_ITEMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NEW_ITEMS) &&
           verifier.VerifyVector(new_items()) &&
           verifier.VerifyVectorOfTables(new_items()) &&
           VerifyOffset(verifier, VT_OLD_ITEMS) &&
           verifier.VerifyVector(old_items()) &&
           verifier.VerifyVectorOfTables(old_items()) &&
           verifier.EndTable();
  }
};

struct FB_InventoryBuilder {
  typedef FB_Inventory Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_new_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>>> new_items) {
    fbb_.AddOffset(FB_Inventory::VT_NEW_ITEMS, new_items);
  }
  void add_old_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>>> old_items) {
    fbb_.AddOffset(FB_Inventory::VT_OLD_ITEMS, old_items);
  }
  explicit FB_InventoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Inventory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Inventory>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Inventory> CreateFB_Inventory(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>>> new_items = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbItem::FB_Item>>> old_items = 0) {
  FB_InventoryBuilder builder_(_fbb);
  builder_.add_old_items(old_items);
  builder_.add_new_items(new_items);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_Inventory> CreateFB_InventoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbItem::FB_Item>> *new_items = nullptr,
    const std::vector<flatbuffers::Offset<fbItem::FB_Item>> *old_items = nullptr) {
  auto new_items__ = new_items ? _fbb.CreateVector<flatbuffers::Offset<fbItem::FB_Item>>(*new_items) : 0;
  auto old_items__ = old_items ? _fbb.CreateVector<flatbuffers::Offset<fbItem::FB_Item>>(*old_items) : 0;
  return fbInventory::CreateFB_Inventory(
      _fbb,
      new_items__,
      old_items__);
}

}  // namespace fbInventory

#endif  // FLATBUFFERS_GENERATED_INVENTORYFB_FBINVENTORY_H_
