// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UNITFB_FBUNIT_H_
#define FLATBUFFERS_GENERATED_UNITFB_FBUNIT_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "characterModelFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "skillFB_generated.h"
#include "characterFB_generated.h"
#include "attributeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbUnit {

struct FB_Unit;
struct FB_UnitBuilder;

enum FB_UnitUnion : uint8_t {
  FB_UnitUnion_NONE = 0,
  FB_UnitUnion_fbCharacter_FB_Character = 1,
  FB_UnitUnion_MIN = FB_UnitUnion_NONE,
  FB_UnitUnion_MAX = FB_UnitUnion_fbCharacter_FB_Character
};

inline const FB_UnitUnion (&EnumValuesFB_UnitUnion())[2] {
  static const FB_UnitUnion values[] = {
    FB_UnitUnion_NONE,
    FB_UnitUnion_fbCharacter_FB_Character
  };
  return values;
}

inline const char * const *EnumNamesFB_UnitUnion() {
  static const char * const names[3] = {
    "NONE",
    "fbCharacter_FB_Character",
    nullptr
  };
  return names;
}

inline const char *EnumNameFB_UnitUnion(FB_UnitUnion e) {
  if (flatbuffers::IsOutRange(e, FB_UnitUnion_NONE, FB_UnitUnion_fbCharacter_FB_Character)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFB_UnitUnion()[index];
}

template<typename T> struct FB_UnitUnionTraits {
  static const FB_UnitUnion enum_value = FB_UnitUnion_NONE;
};

template<> struct FB_UnitUnionTraits<fbCharacter::FB_Character> {
  static const FB_UnitUnion enum_value = FB_UnitUnion_fbCharacter_FB_Character;
};

bool VerifyFB_UnitUnion(flatbuffers::Verifier &verifier, const void *obj, FB_UnitUnion type);
bool VerifyFB_UnitUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FB_Unit FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_UnitBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIT_TYPE = 4,
    VT_UNIT = 6
  };
  fbUnit::FB_UnitUnion unit_type() const {
    return static_cast<fbUnit::FB_UnitUnion>(GetField<uint8_t>(VT_UNIT_TYPE, 0));
  }
  const void *unit() const {
    return GetPointer<const void *>(VT_UNIT);
  }
  template<typename T> const T *unit_as() const;
  const fbCharacter::FB_Character *unit_as_fbCharacter_FB_Character() const {
    return unit_type() == fbUnit::FB_UnitUnion_fbCharacter_FB_Character ? static_cast<const fbCharacter::FB_Character *>(unit()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_UNIT_TYPE) &&
           VerifyOffset(verifier, VT_UNIT) &&
           VerifyFB_UnitUnion(verifier, unit(), unit_type()) &&
           verifier.EndTable();
  }
};

template<> inline const fbCharacter::FB_Character *FB_Unit::unit_as<fbCharacter::FB_Character>() const {
  return unit_as_fbCharacter_FB_Character();
}

struct FB_UnitBuilder {
  typedef FB_Unit Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_unit_type(fbUnit::FB_UnitUnion unit_type) {
    fbb_.AddElement<uint8_t>(FB_Unit::VT_UNIT_TYPE, static_cast<uint8_t>(unit_type), 0);
  }
  void add_unit(flatbuffers::Offset<void> unit) {
    fbb_.AddOffset(FB_Unit::VT_UNIT, unit);
  }
  explicit FB_UnitBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Unit> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Unit>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Unit> CreateFB_Unit(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbUnit::FB_UnitUnion unit_type = fbUnit::FB_UnitUnion_NONE,
    flatbuffers::Offset<void> unit = 0) {
  FB_UnitBuilder builder_(_fbb);
  builder_.add_unit(unit);
  builder_.add_unit_type(unit_type);
  return builder_.Finish();
}

inline bool VerifyFB_UnitUnion(flatbuffers::Verifier &verifier, const void *obj, FB_UnitUnion type) {
  switch (type) {
    case FB_UnitUnion_NONE: {
      return true;
    }
    case FB_UnitUnion_fbCharacter_FB_Character: {
      auto ptr = reinterpret_cast<const fbCharacter::FB_Character *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFB_UnitUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFB_UnitUnion(
        verifier,  values->Get(i), types->GetEnum<FB_UnitUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace fbUnit

#endif  // FLATBUFFERS_GENERATED_UNITFB_FBUNIT_H_
