// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRIBUTETYPEFB_FBATTRIBUTE_H_
#define FLATBUFFERS_GENERATED_ATTRIBUTETYPEFB_FBATTRIBUTE_H_

#include "flatbuffers/flatbuffers.h"

namespace fbAttribute {

enum FB_AttributeType : int8_t {
  FB_AttributeType_INVALID = 0,
  FB_AttributeType_COORDINATION = 1,
  FB_AttributeType_LUCK = 2,
  FB_AttributeType_AWARENESS = 3,
  FB_AttributeType_STRENGTH = 4,
  FB_AttributeType_SPEED = 5,
  FB_AttributeType_INTELLIGENCE = 6,
  FB_AttributeType_CHARISMA = 7,
  FB_AttributeType_MIN = FB_AttributeType_INVALID,
  FB_AttributeType_MAX = FB_AttributeType_CHARISMA
};

inline const FB_AttributeType (&EnumValuesFB_AttributeType())[8] {
  static const FB_AttributeType values[] = {
    FB_AttributeType_INVALID,
    FB_AttributeType_COORDINATION,
    FB_AttributeType_LUCK,
    FB_AttributeType_AWARENESS,
    FB_AttributeType_STRENGTH,
    FB_AttributeType_SPEED,
    FB_AttributeType_INTELLIGENCE,
    FB_AttributeType_CHARISMA
  };
  return values;
}

inline const char * const *EnumNamesFB_AttributeType() {
  static const char * const names[9] = {
    "INVALID",
    "COORDINATION",
    "LUCK",
    "AWARENESS",
    "STRENGTH",
    "SPEED",
    "INTELLIGENCE",
    "CHARISMA",
    nullptr
  };
  return names;
}

inline const char *EnumNameFB_AttributeType(FB_AttributeType e) {
  if (flatbuffers::IsOutRange(e, FB_AttributeType_INVALID, FB_AttributeType_CHARISMA)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFB_AttributeType()[index];
}

}  // namespace fbAttribute

#endif  // FLATBUFFERS_GENERATED_ATTRIBUTETYPEFB_FBATTRIBUTE_H_
