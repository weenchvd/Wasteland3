// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEAPONFB_FBWEAPON_H_
#define FLATBUFFERS_GENERATED_WEAPONFB_FBWEAPON_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbWeapon {

struct FB_Weapon;
struct FB_WeaponBuilder;

struct FB_Weapon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_WeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_MODS = 6
  };
  fbWeapon::FB_WeaponModel model() const {
    return static_cast<fbWeapon::FB_WeaponModel>(GetField<int16_t>(VT_MODEL, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>> *mods() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>> *>(VT_MODS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_MODEL) &&
           VerifyOffset(verifier, VT_MODS) &&
           verifier.VerifyVector(mods()) &&
           verifier.VerifyVectorOfTables(mods()) &&
           verifier.EndTable();
  }
};

struct FB_WeaponBuilder {
  typedef FB_Weapon Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model(fbWeapon::FB_WeaponModel model) {
    fbb_.AddElement<int16_t>(FB_Weapon::VT_MODEL, static_cast<int16_t>(model), 0);
  }
  void add_mods(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>>> mods) {
    fbb_.AddOffset(FB_Weapon::VT_MODS, mods);
  }
  explicit FB_WeaponBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Weapon>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Weapon> CreateFB_Weapon(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbWeapon::FB_WeaponModel model = fbWeapon::FB_WeaponModel_INVALID,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>>> mods = 0) {
  FB_WeaponBuilder builder_(_fbb);
  builder_.add_mods(mods);
  builder_.add_model(model);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_Weapon> CreateFB_WeaponDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbWeapon::FB_WeaponModel model = fbWeapon::FB_WeaponModel_INVALID,
    const std::vector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>> *mods = nullptr) {
  auto mods__ = mods ? _fbb.CreateVector<flatbuffers::Offset<fbWeaponMod::FB_WeaponMod>>(*mods) : 0;
  return fbWeapon::CreateFB_Weapon(
      _fbb,
      model,
      mods__);
}

}  // namespace fbWeapon

#endif  // FLATBUFFERS_GENERATED_WEAPONFB_FBWEAPON_H_
