// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERTYPEFB_FBCHARACTER_H_
#define FLATBUFFERS_GENERATED_CHARACTERTYPEFB_FBCHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace fbCharacter {

enum FB_CharacterType : int8_t {
  FB_CharacterType_INVALID = 0,
  FB_CharacterType_RANGER = 1,
  FB_CharacterType_COMPANION = 2,
  FB_CharacterType_MIN = FB_CharacterType_INVALID,
  FB_CharacterType_MAX = FB_CharacterType_COMPANION
};

inline const FB_CharacterType (&EnumValuesFB_CharacterType())[3] {
  static const FB_CharacterType values[] = {
    FB_CharacterType_INVALID,
    FB_CharacterType_RANGER,
    FB_CharacterType_COMPANION
  };
  return values;
}

inline const char * const *EnumNamesFB_CharacterType() {
  static const char * const names[4] = {
    "INVALID",
    "RANGER",
    "COMPANION",
    nullptr
  };
  return names;
}

inline const char *EnumNameFB_CharacterType(FB_CharacterType e) {
  if (flatbuffers::IsOutRange(e, FB_CharacterType_INVALID, FB_CharacterType_COMPANION)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFB_CharacterType()[index];
}

}  // namespace fbCharacter

#endif  // FLATBUFFERS_GENERATED_CHARACTERTYPEFB_FBCHARACTER_H_
