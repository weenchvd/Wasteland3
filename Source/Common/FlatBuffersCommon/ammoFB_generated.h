// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMMOFB_FBAMMO_H_
#define FLATBUFFERS_GENERATED_AMMOFB_FBAMMO_H_

#include "flatbuffers/flatbuffers.h"

#include "ammoTypeFB_generated.h"

namespace fbAmmo {

struct FB_Ammo;
struct FB_AmmoBuilder;

struct FB_Ammo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AmmoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_QUANTITY = 6
  };
  fbAmmo::FB_AmmoType type() const {
    return static_cast<fbAmmo::FB_AmmoType>(GetField<int8_t>(VT_TYPE, 0));
  }
  int16_t quantity() const {
    return GetField<int16_t>(VT_QUANTITY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int16_t>(verifier, VT_QUANTITY) &&
           verifier.EndTable();
  }
};

struct FB_AmmoBuilder {
  typedef FB_Ammo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(fbAmmo::FB_AmmoType type) {
    fbb_.AddElement<int8_t>(FB_Ammo::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_quantity(int16_t quantity) {
    fbb_.AddElement<int16_t>(FB_Ammo::VT_QUANTITY, quantity, 0);
  }
  explicit FB_AmmoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Ammo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Ammo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Ammo> CreateFB_Ammo(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbAmmo::FB_AmmoType type = fbAmmo::FB_AmmoType_INVALID,
    int16_t quantity = 0) {
  FB_AmmoBuilder builder_(_fbb);
  builder_.add_quantity(quantity);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace fbAmmo

#endif  // FLATBUFFERS_GENERATED_AMMOFB_FBAMMO_H_
