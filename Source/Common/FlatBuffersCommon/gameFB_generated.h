// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEFB_FBGAME_H_
#define FLATBUFFERS_GENERATED_GAMEFB_FBGAME_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "squadFB_generated.h"
#include "characterModelFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "skillFB_generated.h"
#include "itemFB_generated.h"
#include "inventoryFB_generated.h"
#include "characterFB_generated.h"
#include "ammoFB_generated.h"
#include "unitFB_generated.h"
#include "attributeFB_generated.h"
#include "ammoTypeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbGame {

struct FB_Game;
struct FB_GameBuilder;

struct FB_Game FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_GameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SQUAD = 4,
    VT_SHOP = 6
  };
  const fbSquad::FB_Squad *squad() const {
    return GetPointer<const fbSquad::FB_Squad *>(VT_SQUAD);
  }
  const fbInventory::FB_Inventory *shop() const {
    return GetPointer<const fbInventory::FB_Inventory *>(VT_SHOP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SQUAD) &&
           verifier.VerifyTable(squad()) &&
           VerifyOffset(verifier, VT_SHOP) &&
           verifier.VerifyTable(shop()) &&
           verifier.EndTable();
  }
};

struct FB_GameBuilder {
  typedef FB_Game Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_squad(flatbuffers::Offset<fbSquad::FB_Squad> squad) {
    fbb_.AddOffset(FB_Game::VT_SQUAD, squad);
  }
  void add_shop(flatbuffers::Offset<fbInventory::FB_Inventory> shop) {
    fbb_.AddOffset(FB_Game::VT_SHOP, shop);
  }
  explicit FB_GameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Game> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Game>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Game> CreateFB_Game(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbSquad::FB_Squad> squad = 0,
    flatbuffers::Offset<fbInventory::FB_Inventory> shop = 0) {
  FB_GameBuilder builder_(_fbb);
  builder_.add_shop(shop);
  builder_.add_squad(squad);
  return builder_.Finish();
}

inline const fbGame::FB_Game *GetFB_Game(const void *buf) {
  return flatbuffers::GetRoot<fbGame::FB_Game>(buf);
}

inline const fbGame::FB_Game *GetSizePrefixedFB_Game(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbGame::FB_Game>(buf);
}

inline bool VerifyFB_GameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbGame::FB_Game>(nullptr);
}

inline bool VerifySizePrefixedFB_GameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbGame::FB_Game>(nullptr);
}

inline void FinishFB_GameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbGame::FB_Game> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFB_GameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbGame::FB_Game> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbGame

#endif  // FLATBUFFERS_GENERATED_GAMEFB_FBGAME_H_
