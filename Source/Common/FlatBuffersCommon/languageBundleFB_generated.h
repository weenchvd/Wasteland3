// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LANGUAGEBUNDLEFB_FBCOMMON_H_
#define FLATBUFFERS_GENERATED_LANGUAGEBUNDLEFB_FBCOMMON_H_

#include "flatbuffers/flatbuffers.h"

namespace fbCommon {

struct FB_LanguageBundle;
struct FB_LanguageBundleBuilder;

struct FB_LanguageBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_LanguageBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EN = 4,
    VT_RU = 6
  };
  const flatbuffers::String *en() const {
    return GetPointer<const flatbuffers::String *>(VT_EN);
  }
  const flatbuffers::String *ru() const {
    return GetPointer<const flatbuffers::String *>(VT_RU);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EN) &&
           verifier.VerifyString(en()) &&
           VerifyOffset(verifier, VT_RU) &&
           verifier.VerifyString(ru()) &&
           verifier.EndTable();
  }
};

struct FB_LanguageBundleBuilder {
  typedef FB_LanguageBundle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_en(flatbuffers::Offset<flatbuffers::String> en) {
    fbb_.AddOffset(FB_LanguageBundle::VT_EN, en);
  }
  void add_ru(flatbuffers::Offset<flatbuffers::String> ru) {
    fbb_.AddOffset(FB_LanguageBundle::VT_RU, ru);
  }
  explicit FB_LanguageBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_LanguageBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_LanguageBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_LanguageBundle> CreateFB_LanguageBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> en = 0,
    flatbuffers::Offset<flatbuffers::String> ru = 0) {
  FB_LanguageBundleBuilder builder_(_fbb);
  builder_.add_ru(ru);
  builder_.add_en(en);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_LanguageBundle> CreateFB_LanguageBundleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *en = nullptr,
    const char *ru = nullptr) {
  auto en__ = en ? _fbb.CreateString(en) : 0;
  auto ru__ = ru ? _fbb.CreateString(ru) : 0;
  return fbCommon::CreateFB_LanguageBundle(
      _fbb,
      en__,
      ru__);
}

}  // namespace fbCommon

#endif  // FLATBUFFERS_GENERATED_LANGUAGEBUNDLEFB_FBCOMMON_H_
