// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SQUADFB_FBSQUAD_H_
#define FLATBUFFERS_GENERATED_SQUADFB_FBSQUAD_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "characterModelFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "skillFB_generated.h"
#include "itemFB_generated.h"
#include "inventoryFB_generated.h"
#include "characterFB_generated.h"
#include "ammoFB_generated.h"
#include "unitFB_generated.h"
#include "attributeFB_generated.h"
#include "ammoTypeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbSquad {

struct FB_UnitSlotPair;
struct FB_UnitSlotPairBuilder;

struct FB_Squad;
struct FB_SquadBuilder;

struct FB_UnitSlotPair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_UnitSlotPairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIT = 4,
    VT_SLOT = 6
  };
  const fbUnit::FB_Unit *unit() const {
    return GetPointer<const fbUnit::FB_Unit *>(VT_UNIT);
  }
  int8_t slot() const {
    return GetField<int8_t>(VT_SLOT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIT) &&
           verifier.VerifyTable(unit()) &&
           VerifyField<int8_t>(verifier, VT_SLOT) &&
           verifier.EndTable();
  }
};

struct FB_UnitSlotPairBuilder {
  typedef FB_UnitSlotPair Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_unit(flatbuffers::Offset<fbUnit::FB_Unit> unit) {
    fbb_.AddOffset(FB_UnitSlotPair::VT_UNIT, unit);
  }
  void add_slot(int8_t slot) {
    fbb_.AddElement<int8_t>(FB_UnitSlotPair::VT_SLOT, slot, 0);
  }
  explicit FB_UnitSlotPairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_UnitSlotPair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_UnitSlotPair>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_UnitSlotPair> CreateFB_UnitSlotPair(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbUnit::FB_Unit> unit = 0,
    int8_t slot = 0) {
  FB_UnitSlotPairBuilder builder_(_fbb);
  builder_.add_unit(unit);
  builder_.add_slot(slot);
  return builder_.Finish();
}

struct FB_Squad FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_SquadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNITS = 4,
    VT_INVENTORY = 6,
    VT_MONEY = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>> *units() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>> *>(VT_UNITS);
  }
  const fbInventory::FB_Inventory *inventory() const {
    return GetPointer<const fbInventory::FB_Inventory *>(VT_INVENTORY);
  }
  int64_t money() const {
    return GetField<int64_t>(VT_MONEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNITS) &&
           verifier.VerifyVector(units()) &&
           verifier.VerifyVectorOfTables(units()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyTable(inventory()) &&
           VerifyField<int64_t>(verifier, VT_MONEY) &&
           verifier.EndTable();
  }
};

struct FB_SquadBuilder {
  typedef FB_Squad Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_units(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>>> units) {
    fbb_.AddOffset(FB_Squad::VT_UNITS, units);
  }
  void add_inventory(flatbuffers::Offset<fbInventory::FB_Inventory> inventory) {
    fbb_.AddOffset(FB_Squad::VT_INVENTORY, inventory);
  }
  void add_money(int64_t money) {
    fbb_.AddElement<int64_t>(FB_Squad::VT_MONEY, money, 0);
  }
  explicit FB_SquadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Squad> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Squad>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Squad> CreateFB_Squad(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>>> units = 0,
    flatbuffers::Offset<fbInventory::FB_Inventory> inventory = 0,
    int64_t money = 0) {
  FB_SquadBuilder builder_(_fbb);
  builder_.add_money(money);
  builder_.add_inventory(inventory);
  builder_.add_units(units);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_Squad> CreateFB_SquadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>> *units = nullptr,
    flatbuffers::Offset<fbInventory::FB_Inventory> inventory = 0,
    int64_t money = 0) {
  auto units__ = units ? _fbb.CreateVector<flatbuffers::Offset<fbSquad::FB_UnitSlotPair>>(*units) : 0;
  return fbSquad::CreateFB_Squad(
      _fbb,
      units__,
      inventory,
      money);
}

}  // namespace fbSquad

#endif  // FLATBUFFERS_GENERATED_SQUADFB_FBSQUAD_H_
