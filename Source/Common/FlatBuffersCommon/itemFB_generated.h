// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEMFB_FBITEM_H_
#define FLATBUFFERS_GENERATED_ITEMFB_FBITEM_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponFB_generated.h"
#include "weaponModFB_generated.h"
#include "weaponModModelFB_generated.h"
#include "ammoFB_generated.h"
#include "ammoTypeFB_generated.h"
#include "weaponModelFB_generated.h"

namespace fbItem {

struct FB_Item;
struct FB_ItemBuilder;

enum FB_ItemUnion : uint8_t {
  FB_ItemUnion_NONE = 0,
  FB_ItemUnion_fbWeapon_FB_Weapon = 1,
  FB_ItemUnion_fbWeaponMod_FB_WeaponMod = 2,
  FB_ItemUnion_fbAmmo_FB_Ammo = 3,
  FB_ItemUnion_MIN = FB_ItemUnion_NONE,
  FB_ItemUnion_MAX = FB_ItemUnion_fbAmmo_FB_Ammo
};

inline const FB_ItemUnion (&EnumValuesFB_ItemUnion())[4] {
  static const FB_ItemUnion values[] = {
    FB_ItemUnion_NONE,
    FB_ItemUnion_fbWeapon_FB_Weapon,
    FB_ItemUnion_fbWeaponMod_FB_WeaponMod,
    FB_ItemUnion_fbAmmo_FB_Ammo
  };
  return values;
}

inline const char * const *EnumNamesFB_ItemUnion() {
  static const char * const names[5] = {
    "NONE",
    "fbWeapon_FB_Weapon",
    "fbWeaponMod_FB_WeaponMod",
    "fbAmmo_FB_Ammo",
    nullptr
  };
  return names;
}

inline const char *EnumNameFB_ItemUnion(FB_ItemUnion e) {
  if (flatbuffers::IsOutRange(e, FB_ItemUnion_NONE, FB_ItemUnion_fbAmmo_FB_Ammo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFB_ItemUnion()[index];
}

template<typename T> struct FB_ItemUnionTraits {
  static const FB_ItemUnion enum_value = FB_ItemUnion_NONE;
};

template<> struct FB_ItemUnionTraits<fbWeapon::FB_Weapon> {
  static const FB_ItemUnion enum_value = FB_ItemUnion_fbWeapon_FB_Weapon;
};

template<> struct FB_ItemUnionTraits<fbWeaponMod::FB_WeaponMod> {
  static const FB_ItemUnion enum_value = FB_ItemUnion_fbWeaponMod_FB_WeaponMod;
};

template<> struct FB_ItemUnionTraits<fbAmmo::FB_Ammo> {
  static const FB_ItemUnion enum_value = FB_ItemUnion_fbAmmo_FB_Ammo;
};

bool VerifyFB_ItemUnion(flatbuffers::Verifier &verifier, const void *obj, FB_ItemUnion type);
bool VerifyFB_ItemUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FB_Item FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_ItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM_TYPE = 4,
    VT_ITEM = 6
  };
  fbItem::FB_ItemUnion item_type() const {
    return static_cast<fbItem::FB_ItemUnion>(GetField<uint8_t>(VT_ITEM_TYPE, 0));
  }
  const void *item() const {
    return GetPointer<const void *>(VT_ITEM);
  }
  template<typename T> const T *item_as() const;
  const fbWeapon::FB_Weapon *item_as_fbWeapon_FB_Weapon() const {
    return item_type() == fbItem::FB_ItemUnion_fbWeapon_FB_Weapon ? static_cast<const fbWeapon::FB_Weapon *>(item()) : nullptr;
  }
  const fbWeaponMod::FB_WeaponMod *item_as_fbWeaponMod_FB_WeaponMod() const {
    return item_type() == fbItem::FB_ItemUnion_fbWeaponMod_FB_WeaponMod ? static_cast<const fbWeaponMod::FB_WeaponMod *>(item()) : nullptr;
  }
  const fbAmmo::FB_Ammo *item_as_fbAmmo_FB_Ammo() const {
    return item_type() == fbItem::FB_ItemUnion_fbAmmo_FB_Ammo ? static_cast<const fbAmmo::FB_Ammo *>(item()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ITEM_TYPE) &&
           VerifyOffset(verifier, VT_ITEM) &&
           VerifyFB_ItemUnion(verifier, item(), item_type()) &&
           verifier.EndTable();
  }
};

template<> inline const fbWeapon::FB_Weapon *FB_Item::item_as<fbWeapon::FB_Weapon>() const {
  return item_as_fbWeapon_FB_Weapon();
}

template<> inline const fbWeaponMod::FB_WeaponMod *FB_Item::item_as<fbWeaponMod::FB_WeaponMod>() const {
  return item_as_fbWeaponMod_FB_WeaponMod();
}

template<> inline const fbAmmo::FB_Ammo *FB_Item::item_as<fbAmmo::FB_Ammo>() const {
  return item_as_fbAmmo_FB_Ammo();
}

struct FB_ItemBuilder {
  typedef FB_Item Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_item_type(fbItem::FB_ItemUnion item_type) {
    fbb_.AddElement<uint8_t>(FB_Item::VT_ITEM_TYPE, static_cast<uint8_t>(item_type), 0);
  }
  void add_item(flatbuffers::Offset<void> item) {
    fbb_.AddOffset(FB_Item::VT_ITEM, item);
  }
  explicit FB_ItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Item> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Item>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Item> CreateFB_Item(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbItem::FB_ItemUnion item_type = fbItem::FB_ItemUnion_NONE,
    flatbuffers::Offset<void> item = 0) {
  FB_ItemBuilder builder_(_fbb);
  builder_.add_item(item);
  builder_.add_item_type(item_type);
  return builder_.Finish();
}

inline bool VerifyFB_ItemUnion(flatbuffers::Verifier &verifier, const void *obj, FB_ItemUnion type) {
  switch (type) {
    case FB_ItemUnion_NONE: {
      return true;
    }
    case FB_ItemUnion_fbWeapon_FB_Weapon: {
      auto ptr = reinterpret_cast<const fbWeapon::FB_Weapon *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FB_ItemUnion_fbWeaponMod_FB_WeaponMod: {
      auto ptr = reinterpret_cast<const fbWeaponMod::FB_WeaponMod *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FB_ItemUnion_fbAmmo_FB_Ammo: {
      auto ptr = reinterpret_cast<const fbAmmo::FB_Ammo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFB_ItemUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFB_ItemUnion(
        verifier,  values->Get(i), types->GetEnum<FB_ItemUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace fbItem

#endif  // FLATBUFFERS_GENERATED_ITEMFB_FBITEM_H_
