// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OPTIONSFB_FBOPTIONS_H_
#define FLATBUFFERS_GENERATED_OPTIONSFB_FBOPTIONS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbOptions {

struct FB_Options;
struct FB_OptionsBuilder;

enum FB_Options_Language : int8_t {
  FB_Options_Language_INVALID = 0,
  FB_Options_Language_EN = 1,
  FB_Options_Language_RU = 2,
  FB_Options_Language_MIN = FB_Options_Language_INVALID,
  FB_Options_Language_MAX = FB_Options_Language_RU
};

inline const FB_Options_Language (&EnumValuesFB_Options_Language())[3] {
  static const FB_Options_Language values[] = {
    FB_Options_Language_INVALID,
    FB_Options_Language_EN,
    FB_Options_Language_RU
  };
  return values;
}

inline const char * const *EnumNamesFB_Options_Language() {
  static const char * const names[4] = {
    "INVALID",
    "EN",
    "RU",
    nullptr
  };
  return names;
}

inline const char *EnumNameFB_Options_Language(FB_Options_Language e) {
  if (flatbuffers::IsOutRange(e, FB_Options_Language_INVALID, FB_Options_Language_RU)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFB_Options_Language()[index];
}

struct FB_Options FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_OptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANGUAGE = 4
  };
  fbOptions::FB_Options_Language language() const {
    return static_cast<fbOptions::FB_Options_Language>(GetField<int8_t>(VT_LANGUAGE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LANGUAGE) &&
           verifier.EndTable();
  }
};

struct FB_OptionsBuilder {
  typedef FB_Options Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_language(fbOptions::FB_Options_Language language) {
    fbb_.AddElement<int8_t>(FB_Options::VT_LANGUAGE, static_cast<int8_t>(language), 0);
  }
  explicit FB_OptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Options>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Options> CreateFB_Options(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbOptions::FB_Options_Language language = fbOptions::FB_Options_Language_INVALID) {
  FB_OptionsBuilder builder_(_fbb);
  builder_.add_language(language);
  return builder_.Finish();
}

inline const fbOptions::FB_Options *GetFB_Options(const void *buf) {
  return flatbuffers::GetRoot<fbOptions::FB_Options>(buf);
}

inline const fbOptions::FB_Options *GetSizePrefixedFB_Options(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbOptions::FB_Options>(buf);
}

inline const char *FB_OptionsIdentifier() {
  return "OPTS";
}

inline bool FB_OptionsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_OptionsIdentifier());
}

inline bool VerifyFB_OptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbOptions::FB_Options>(FB_OptionsIdentifier());
}

inline bool VerifySizePrefixedFB_OptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbOptions::FB_Options>(FB_OptionsIdentifier());
}

inline void FinishFB_OptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbOptions::FB_Options> root) {
  fbb.Finish(root, FB_OptionsIdentifier());
}

inline void FinishSizePrefixedFB_OptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbOptions::FB_Options> root) {
  fbb.FinishSizePrefixed(root, FB_OptionsIdentifier());
}

}  // namespace fbOptions

#endif  // FLATBUFFERS_GENERATED_OPTIONSFB_FBOPTIONS_H_
