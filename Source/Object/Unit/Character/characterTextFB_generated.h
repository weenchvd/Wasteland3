// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERTEXTFB_FBCHARACTER_H_
#define FLATBUFFERS_GENERATED_CHARACTERTEXTFB_FBCHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "languageBundleFB_generated.h"

namespace fbCharacter {

struct FB_CharacterTextType;
struct FB_CharacterTextTypeBuilder;

struct FB_CharacterTextStats;
struct FB_CharacterTextStatsBuilder;

struct FB_CharacterTextCommon;
struct FB_CharacterTextCommonBuilder;

struct FB_CharacterText;
struct FB_CharacterTextBuilder;

struct FB_CharacterTextType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterTextTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RANGER = 4,
    VT_COMPANION = 6
  };
  const fbCommon::FB_LanguageBundle *ranger() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_RANGER);
  }
  const fbCommon::FB_LanguageBundle *companion() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COMPANION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RANGER) &&
           verifier.VerifyTable(ranger()) &&
           VerifyOffset(verifier, VT_COMPANION) &&
           verifier.VerifyTable(companion()) &&
           verifier.EndTable();
  }
};

struct FB_CharacterTextTypeBuilder {
  typedef FB_CharacterTextType Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ranger(flatbuffers::Offset<fbCommon::FB_LanguageBundle> ranger) {
    fbb_.AddOffset(FB_CharacterTextType::VT_RANGER, ranger);
  }
  void add_companion(flatbuffers::Offset<fbCommon::FB_LanguageBundle> companion) {
    fbb_.AddOffset(FB_CharacterTextType::VT_COMPANION, companion);
  }
  explicit FB_CharacterTextTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterTextType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterTextType>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterTextType> CreateFB_CharacterTextType(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> ranger = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> companion = 0) {
  FB_CharacterTextTypeBuilder builder_(_fbb);
  builder_.add_companion(companion);
  builder_.add_ranger(ranger);
  return builder_.Finish();
}

struct FB_CharacterTextStats FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterTextStatsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CON = 4,
    VT_CON_PER_LEVEL = 6,
    VT_HEALING_BONUS = 8,
    VT_ACTION_POINTS = 10,
    VT_HIT_CHANCE = 12,
    VT_CRIT_CHANCE = 14,
    VT_CRIT_DMG = 16,
    VT_PENETRATION = 18,
    VT_SNEAK_ATTACK_DMG = 20,
    VT_STRIKE_RATE = 22,
    VT_ARMOR = 24,
    VT_EVASION = 26,
    VT_CRIT_RESISTANCE = 28,
    VT_FIRE_RESISTANCE = 30,
    VT_COLD_RESISTANCE = 32,
    VT_ENERGY_RESISTANCE = 34,
    VT_EXPLOSIVE_RESISTANCE = 36,
    VT_STATUS_EFFECT_RESISTANCE = 38,
    VT_RADIATION_RESISTANCE = 40,
    VT_DOWNED_TIME = 42,
    VT_MELEE_DMG_BONUS = 44,
    VT_RANGED_DMG_BONUS = 46,
    VT_NORMAL_DMG_BONUS = 48,
    VT_FIRE_DMG_BONUS = 50,
    VT_COLD_DMG_BONUS = 52,
    VT_ENERGY_DMG_BONUS = 54,
    VT_EXPLOSIVE_DMG_BONUS = 56,
    VT_PERCEPTION = 58,
    VT_THROWING_RANGE = 60,
    VT_INITIATIVE = 62,
    VT_DETECTION_TIME = 64,
    VT_COMBAT_SPEED = 66,
    VT_QUICK_SLOTS = 68,
    VT_LEADERSHIP_RANGE = 70,
    VT_EXPERIENCE_BONUS = 72
  };
  const fbCommon::FB_LanguageBundle *con() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CON);
  }
  const fbCommon::FB_LanguageBundle *con_per_level() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CON_PER_LEVEL);
  }
  const fbCommon::FB_LanguageBundle *healing_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_HEALING_BONUS);
  }
  const fbCommon::FB_LanguageBundle *action_points() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ACTION_POINTS);
  }
  const fbCommon::FB_LanguageBundle *hit_chance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_HIT_CHANCE);
  }
  const fbCommon::FB_LanguageBundle *crit_chance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CRIT_CHANCE);
  }
  const fbCommon::FB_LanguageBundle *crit_dmg() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CRIT_DMG);
  }
  const fbCommon::FB_LanguageBundle *penetration() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_PENETRATION);
  }
  const fbCommon::FB_LanguageBundle *sneak_attack_dmg() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SNEAK_ATTACK_DMG);
  }
  const fbCommon::FB_LanguageBundle *strike_rate() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_STRIKE_RATE);
  }
  const fbCommon::FB_LanguageBundle *armor() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ARMOR);
  }
  const fbCommon::FB_LanguageBundle *evasion() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EVASION);
  }
  const fbCommon::FB_LanguageBundle *crit_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CRIT_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *fire_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_FIRE_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *cold_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COLD_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *energy_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ENERGY_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *explosive_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EXPLOSIVE_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *status_effect_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_STATUS_EFFECT_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *radiation_resistance() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_RADIATION_RESISTANCE);
  }
  const fbCommon::FB_LanguageBundle *downed_time() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DOWNED_TIME);
  }
  const fbCommon::FB_LanguageBundle *melee_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_MELEE_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *ranged_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_RANGED_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *normal_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_NORMAL_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *fire_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_FIRE_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *cold_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COLD_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *energy_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ENERGY_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *explosive_dmg_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EXPLOSIVE_DMG_BONUS);
  }
  const fbCommon::FB_LanguageBundle *perception() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_PERCEPTION);
  }
  const fbCommon::FB_LanguageBundle *throwing_range() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_THROWING_RANGE);
  }
  const fbCommon::FB_LanguageBundle *initiative() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_INITIATIVE);
  }
  const fbCommon::FB_LanguageBundle *detection_time() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DETECTION_TIME);
  }
  const fbCommon::FB_LanguageBundle *combat_speed() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COMBAT_SPEED);
  }
  const fbCommon::FB_LanguageBundle *quick_slots() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_QUICK_SLOTS);
  }
  const fbCommon::FB_LanguageBundle *leadership_range() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_LEADERSHIP_RANGE);
  }
  const fbCommon::FB_LanguageBundle *experience_bonus() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EXPERIENCE_BONUS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CON) &&
           verifier.VerifyTable(con()) &&
           VerifyOffset(verifier, VT_CON_PER_LEVEL) &&
           verifier.VerifyTable(con_per_level()) &&
           VerifyOffset(verifier, VT_HEALING_BONUS) &&
           verifier.VerifyTable(healing_bonus()) &&
           VerifyOffset(verifier, VT_ACTION_POINTS) &&
           verifier.VerifyTable(action_points()) &&
           VerifyOffset(verifier, VT_HIT_CHANCE) &&
           verifier.VerifyTable(hit_chance()) &&
           VerifyOffset(verifier, VT_CRIT_CHANCE) &&
           verifier.VerifyTable(crit_chance()) &&
           VerifyOffset(verifier, VT_CRIT_DMG) &&
           verifier.VerifyTable(crit_dmg()) &&
           VerifyOffset(verifier, VT_PENETRATION) &&
           verifier.VerifyTable(penetration()) &&
           VerifyOffset(verifier, VT_SNEAK_ATTACK_DMG) &&
           verifier.VerifyTable(sneak_attack_dmg()) &&
           VerifyOffset(verifier, VT_STRIKE_RATE) &&
           verifier.VerifyTable(strike_rate()) &&
           VerifyOffset(verifier, VT_ARMOR) &&
           verifier.VerifyTable(armor()) &&
           VerifyOffset(verifier, VT_EVASION) &&
           verifier.VerifyTable(evasion()) &&
           VerifyOffset(verifier, VT_CRIT_RESISTANCE) &&
           verifier.VerifyTable(crit_resistance()) &&
           VerifyOffset(verifier, VT_FIRE_RESISTANCE) &&
           verifier.VerifyTable(fire_resistance()) &&
           VerifyOffset(verifier, VT_COLD_RESISTANCE) &&
           verifier.VerifyTable(cold_resistance()) &&
           VerifyOffset(verifier, VT_ENERGY_RESISTANCE) &&
           verifier.VerifyTable(energy_resistance()) &&
           VerifyOffset(verifier, VT_EXPLOSIVE_RESISTANCE) &&
           verifier.VerifyTable(explosive_resistance()) &&
           VerifyOffset(verifier, VT_STATUS_EFFECT_RESISTANCE) &&
           verifier.VerifyTable(status_effect_resistance()) &&
           VerifyOffset(verifier, VT_RADIATION_RESISTANCE) &&
           verifier.VerifyTable(radiation_resistance()) &&
           VerifyOffset(verifier, VT_DOWNED_TIME) &&
           verifier.VerifyTable(downed_time()) &&
           VerifyOffset(verifier, VT_MELEE_DMG_BONUS) &&
           verifier.VerifyTable(melee_dmg_bonus()) &&
           VerifyOffset(verifier, VT_RANGED_DMG_BONUS) &&
           verifier.VerifyTable(ranged_dmg_bonus()) &&
           VerifyOffset(verifier, VT_NORMAL_DMG_BONUS) &&
           verifier.VerifyTable(normal_dmg_bonus()) &&
           VerifyOffset(verifier, VT_FIRE_DMG_BONUS) &&
           verifier.VerifyTable(fire_dmg_bonus()) &&
           VerifyOffset(verifier, VT_COLD_DMG_BONUS) &&
           verifier.VerifyTable(cold_dmg_bonus()) &&
           VerifyOffset(verifier, VT_ENERGY_DMG_BONUS) &&
           verifier.VerifyTable(energy_dmg_bonus()) &&
           VerifyOffset(verifier, VT_EXPLOSIVE_DMG_BONUS) &&
           verifier.VerifyTable(explosive_dmg_bonus()) &&
           VerifyOffset(verifier, VT_PERCEPTION) &&
           verifier.VerifyTable(perception()) &&
           VerifyOffset(verifier, VT_THROWING_RANGE) &&
           verifier.VerifyTable(throwing_range()) &&
           VerifyOffset(verifier, VT_INITIATIVE) &&
           verifier.VerifyTable(initiative()) &&
           VerifyOffset(verifier, VT_DETECTION_TIME) &&
           verifier.VerifyTable(detection_time()) &&
           VerifyOffset(verifier, VT_COMBAT_SPEED) &&
           verifier.VerifyTable(combat_speed()) &&
           VerifyOffset(verifier, VT_QUICK_SLOTS) &&
           verifier.VerifyTable(quick_slots()) &&
           VerifyOffset(verifier, VT_LEADERSHIP_RANGE) &&
           verifier.VerifyTable(leadership_range()) &&
           VerifyOffset(verifier, VT_EXPERIENCE_BONUS) &&
           verifier.VerifyTable(experience_bonus()) &&
           verifier.EndTable();
  }
};

struct FB_CharacterTextStatsBuilder {
  typedef FB_CharacterTextStats Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_con(flatbuffers::Offset<fbCommon::FB_LanguageBundle> con) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_CON, con);
  }
  void add_con_per_level(flatbuffers::Offset<fbCommon::FB_LanguageBundle> con_per_level) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_CON_PER_LEVEL, con_per_level);
  }
  void add_healing_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> healing_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_HEALING_BONUS, healing_bonus);
  }
  void add_action_points(flatbuffers::Offset<fbCommon::FB_LanguageBundle> action_points) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_ACTION_POINTS, action_points);
  }
  void add_hit_chance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> hit_chance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_HIT_CHANCE, hit_chance);
  }
  void add_crit_chance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_chance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_CRIT_CHANCE, crit_chance);
  }
  void add_crit_dmg(flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_dmg) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_CRIT_DMG, crit_dmg);
  }
  void add_penetration(flatbuffers::Offset<fbCommon::FB_LanguageBundle> penetration) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_PENETRATION, penetration);
  }
  void add_sneak_attack_dmg(flatbuffers::Offset<fbCommon::FB_LanguageBundle> sneak_attack_dmg) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_SNEAK_ATTACK_DMG, sneak_attack_dmg);
  }
  void add_strike_rate(flatbuffers::Offset<fbCommon::FB_LanguageBundle> strike_rate) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_STRIKE_RATE, strike_rate);
  }
  void add_armor(flatbuffers::Offset<fbCommon::FB_LanguageBundle> armor) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_ARMOR, armor);
  }
  void add_evasion(flatbuffers::Offset<fbCommon::FB_LanguageBundle> evasion) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_EVASION, evasion);
  }
  void add_crit_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_CRIT_RESISTANCE, crit_resistance);
  }
  void add_fire_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> fire_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_FIRE_RESISTANCE, fire_resistance);
  }
  void add_cold_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> cold_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_COLD_RESISTANCE, cold_resistance);
  }
  void add_energy_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> energy_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_ENERGY_RESISTANCE, energy_resistance);
  }
  void add_explosive_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosive_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_EXPLOSIVE_RESISTANCE, explosive_resistance);
  }
  void add_status_effect_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> status_effect_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_STATUS_EFFECT_RESISTANCE, status_effect_resistance);
  }
  void add_radiation_resistance(flatbuffers::Offset<fbCommon::FB_LanguageBundle> radiation_resistance) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_RADIATION_RESISTANCE, radiation_resistance);
  }
  void add_downed_time(flatbuffers::Offset<fbCommon::FB_LanguageBundle> downed_time) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_DOWNED_TIME, downed_time);
  }
  void add_melee_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> melee_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_MELEE_DMG_BONUS, melee_dmg_bonus);
  }
  void add_ranged_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> ranged_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_RANGED_DMG_BONUS, ranged_dmg_bonus);
  }
  void add_normal_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> normal_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_NORMAL_DMG_BONUS, normal_dmg_bonus);
  }
  void add_fire_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> fire_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_FIRE_DMG_BONUS, fire_dmg_bonus);
  }
  void add_cold_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> cold_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_COLD_DMG_BONUS, cold_dmg_bonus);
  }
  void add_energy_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> energy_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_ENERGY_DMG_BONUS, energy_dmg_bonus);
  }
  void add_explosive_dmg_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosive_dmg_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_EXPLOSIVE_DMG_BONUS, explosive_dmg_bonus);
  }
  void add_perception(flatbuffers::Offset<fbCommon::FB_LanguageBundle> perception) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_PERCEPTION, perception);
  }
  void add_throwing_range(flatbuffers::Offset<fbCommon::FB_LanguageBundle> throwing_range) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_THROWING_RANGE, throwing_range);
  }
  void add_initiative(flatbuffers::Offset<fbCommon::FB_LanguageBundle> initiative) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_INITIATIVE, initiative);
  }
  void add_detection_time(flatbuffers::Offset<fbCommon::FB_LanguageBundle> detection_time) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_DETECTION_TIME, detection_time);
  }
  void add_combat_speed(flatbuffers::Offset<fbCommon::FB_LanguageBundle> combat_speed) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_COMBAT_SPEED, combat_speed);
  }
  void add_quick_slots(flatbuffers::Offset<fbCommon::FB_LanguageBundle> quick_slots) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_QUICK_SLOTS, quick_slots);
  }
  void add_leadership_range(flatbuffers::Offset<fbCommon::FB_LanguageBundle> leadership_range) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_LEADERSHIP_RANGE, leadership_range);
  }
  void add_experience_bonus(flatbuffers::Offset<fbCommon::FB_LanguageBundle> experience_bonus) {
    fbb_.AddOffset(FB_CharacterTextStats::VT_EXPERIENCE_BONUS, experience_bonus);
  }
  explicit FB_CharacterTextStatsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterTextStats> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterTextStats>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterTextStats> CreateFB_CharacterTextStats(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> con = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> con_per_level = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> healing_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> action_points = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> hit_chance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_chance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_dmg = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> penetration = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> sneak_attack_dmg = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> strike_rate = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> armor = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> evasion = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> crit_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> fire_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> cold_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> energy_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosive_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> status_effect_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> radiation_resistance = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> downed_time = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> melee_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> ranged_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> normal_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> fire_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> cold_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> energy_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosive_dmg_bonus = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> perception = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> throwing_range = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> initiative = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> detection_time = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> combat_speed = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> quick_slots = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> leadership_range = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> experience_bonus = 0) {
  FB_CharacterTextStatsBuilder builder_(_fbb);
  builder_.add_experience_bonus(experience_bonus);
  builder_.add_leadership_range(leadership_range);
  builder_.add_quick_slots(quick_slots);
  builder_.add_combat_speed(combat_speed);
  builder_.add_detection_time(detection_time);
  builder_.add_initiative(initiative);
  builder_.add_throwing_range(throwing_range);
  builder_.add_perception(perception);
  builder_.add_explosive_dmg_bonus(explosive_dmg_bonus);
  builder_.add_energy_dmg_bonus(energy_dmg_bonus);
  builder_.add_cold_dmg_bonus(cold_dmg_bonus);
  builder_.add_fire_dmg_bonus(fire_dmg_bonus);
  builder_.add_normal_dmg_bonus(normal_dmg_bonus);
  builder_.add_ranged_dmg_bonus(ranged_dmg_bonus);
  builder_.add_melee_dmg_bonus(melee_dmg_bonus);
  builder_.add_downed_time(downed_time);
  builder_.add_radiation_resistance(radiation_resistance);
  builder_.add_status_effect_resistance(status_effect_resistance);
  builder_.add_explosive_resistance(explosive_resistance);
  builder_.add_energy_resistance(energy_resistance);
  builder_.add_cold_resistance(cold_resistance);
  builder_.add_fire_resistance(fire_resistance);
  builder_.add_crit_resistance(crit_resistance);
  builder_.add_evasion(evasion);
  builder_.add_armor(armor);
  builder_.add_strike_rate(strike_rate);
  builder_.add_sneak_attack_dmg(sneak_attack_dmg);
  builder_.add_penetration(penetration);
  builder_.add_crit_dmg(crit_dmg);
  builder_.add_crit_chance(crit_chance);
  builder_.add_hit_chance(hit_chance);
  builder_.add_action_points(action_points);
  builder_.add_healing_bonus(healing_bonus);
  builder_.add_con_per_level(con_per_level);
  builder_.add_con(con);
  return builder_.Finish();
}

struct FB_CharacterTextCommon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterTextCommonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEVEL = 4,
    VT_STATS = 6,
    VT_XP = 8,
    VT_M_METER = 10,
    VT_SEC = 12
  };
  const fbCommon::FB_LanguageBundle *level() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_LEVEL);
  }
  const fbCommon::FB_LanguageBundle *stats() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_STATS);
  }
  const fbCommon::FB_LanguageBundle *xp() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_XP);
  }
  const fbCommon::FB_LanguageBundle *m_meter() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_M_METER);
  }
  const fbCommon::FB_LanguageBundle *sec() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SEC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LEVEL) &&
           verifier.VerifyTable(level()) &&
           VerifyOffset(verifier, VT_STATS) &&
           verifier.VerifyTable(stats()) &&
           VerifyOffset(verifier, VT_XP) &&
           verifier.VerifyTable(xp()) &&
           VerifyOffset(verifier, VT_M_METER) &&
           verifier.VerifyTable(m_meter()) &&
           VerifyOffset(verifier, VT_SEC) &&
           verifier.VerifyTable(sec()) &&
           verifier.EndTable();
  }
};

struct FB_CharacterTextCommonBuilder {
  typedef FB_CharacterTextCommon Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_level(flatbuffers::Offset<fbCommon::FB_LanguageBundle> level) {
    fbb_.AddOffset(FB_CharacterTextCommon::VT_LEVEL, level);
  }
  void add_stats(flatbuffers::Offset<fbCommon::FB_LanguageBundle> stats) {
    fbb_.AddOffset(FB_CharacterTextCommon::VT_STATS, stats);
  }
  void add_xp(flatbuffers::Offset<fbCommon::FB_LanguageBundle> xp) {
    fbb_.AddOffset(FB_CharacterTextCommon::VT_XP, xp);
  }
  void add_m_meter(flatbuffers::Offset<fbCommon::FB_LanguageBundle> m_meter) {
    fbb_.AddOffset(FB_CharacterTextCommon::VT_M_METER, m_meter);
  }
  void add_sec(flatbuffers::Offset<fbCommon::FB_LanguageBundle> sec) {
    fbb_.AddOffset(FB_CharacterTextCommon::VT_SEC, sec);
  }
  explicit FB_CharacterTextCommonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterTextCommon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterTextCommon>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterTextCommon> CreateFB_CharacterTextCommon(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> level = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> stats = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> xp = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> m_meter = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> sec = 0) {
  FB_CharacterTextCommonBuilder builder_(_fbb);
  builder_.add_sec(sec);
  builder_.add_m_meter(m_meter);
  builder_.add_xp(xp);
  builder_.add_stats(stats);
  builder_.add_level(level);
  return builder_.Finish();
}

struct FB_CharacterText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterTextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_STATS = 6,
    VT_COMMON = 8
  };
  const fbCharacter::FB_CharacterTextType *type() const {
    return GetPointer<const fbCharacter::FB_CharacterTextType *>(VT_TYPE);
  }
  const fbCharacter::FB_CharacterTextStats *stats() const {
    return GetPointer<const fbCharacter::FB_CharacterTextStats *>(VT_STATS);
  }
  const fbCharacter::FB_CharacterTextCommon *common() const {
    return GetPointer<const fbCharacter::FB_CharacterTextCommon *>(VT_COMMON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyOffset(verifier, VT_STATS) &&
           verifier.VerifyTable(stats()) &&
           VerifyOffset(verifier, VT_COMMON) &&
           verifier.VerifyTable(common()) &&
           verifier.EndTable();
  }
};

struct FB_CharacterTextBuilder {
  typedef FB_CharacterText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<fbCharacter::FB_CharacterTextType> type) {
    fbb_.AddOffset(FB_CharacterText::VT_TYPE, type);
  }
  void add_stats(flatbuffers::Offset<fbCharacter::FB_CharacterTextStats> stats) {
    fbb_.AddOffset(FB_CharacterText::VT_STATS, stats);
  }
  void add_common(flatbuffers::Offset<fbCharacter::FB_CharacterTextCommon> common) {
    fbb_.AddOffset(FB_CharacterText::VT_COMMON, common);
  }
  explicit FB_CharacterTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterText>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterText> CreateFB_CharacterText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterTextType> type = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterTextStats> stats = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterTextCommon> common = 0) {
  FB_CharacterTextBuilder builder_(_fbb);
  builder_.add_common(common);
  builder_.add_stats(stats);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const fbCharacter::FB_CharacterText *GetFB_CharacterText(const void *buf) {
  return flatbuffers::GetRoot<fbCharacter::FB_CharacterText>(buf);
}

inline const fbCharacter::FB_CharacterText *GetSizePrefixedFB_CharacterText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbCharacter::FB_CharacterText>(buf);
}

inline const char *FB_CharacterTextIdentifier() {
  return "CHRT";
}

inline bool FB_CharacterTextBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_CharacterTextIdentifier());
}

inline bool VerifyFB_CharacterTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbCharacter::FB_CharacterText>(FB_CharacterTextIdentifier());
}

inline bool VerifySizePrefixedFB_CharacterTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbCharacter::FB_CharacterText>(FB_CharacterTextIdentifier());
}

inline const char *FB_CharacterTextExtension() {
  return "bundle";
}

inline void FinishFB_CharacterTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterText> root) {
  fbb.Finish(root, FB_CharacterTextIdentifier());
}

inline void FinishSizePrefixedFB_CharacterTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterText> root) {
  fbb.FinishSizePrefixed(root, FB_CharacterTextIdentifier());
}

}  // namespace fbCharacter

#endif  // FLATBUFFERS_GENERATED_CHARACTERTEXTFB_FBCHARACTER_H_
