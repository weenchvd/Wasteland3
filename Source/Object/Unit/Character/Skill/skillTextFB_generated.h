// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SKILLTEXTFB_FBSKILL_H_
#define FLATBUFFERS_GENERATED_SKILLTEXTFB_FBSKILL_H_

#include "flatbuffers/flatbuffers.h"

#include "languageBundleFB_generated.h"

namespace fbSkill {

struct FB_SkillTextType;
struct FB_SkillTextTypeBuilder;

struct FB_SkillTextGroup;
struct FB_SkillTextGroupBuilder;

struct FB_SkillText;
struct FB_SkillTextBuilder;

struct FB_SkillTextType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_SkillTextTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUTOMATIC_WEAPONS = 4,
    VT_BIG_GUNS = 6,
    VT_BRAWLING = 8,
    VT_MELEE_COMBAT = 10,
    VT_SMALL_ARMS = 12,
    VT_SNIPER_RIFLES = 14,
    VT_ANIMAL_WHISPERER = 16,
    VT_EXPLOSIVES = 18,
    VT_FIRST_AID = 20,
    VT_SNEAKY_SHIT = 22,
    VT_WEIRD_SCIENCE = 24,
    VT_ARMOR_MODDING = 26,
    VT_LOCKPICKING = 28,
    VT_NERD_STUFF = 30,
    VT_MECHANICS = 32,
    VT_SURVIVAL = 34,
    VT_TOASTER_REPAIR = 36,
    VT_WEAPON_MODDING = 38,
    VT_BARTER = 40,
    VT_HARD_ASS = 42,
    VT_KISS_ASS = 44,
    VT_LEADERSHIP = 46
  };
  const fbCommon::FB_LanguageBundle *automatic_weapons() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_AUTOMATIC_WEAPONS);
  }
  const fbCommon::FB_LanguageBundle *big_guns() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_BIG_GUNS);
  }
  const fbCommon::FB_LanguageBundle *brawling() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_BRAWLING);
  }
  const fbCommon::FB_LanguageBundle *melee_combat() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_MELEE_COMBAT);
  }
  const fbCommon::FB_LanguageBundle *small_arms() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SMALL_ARMS);
  }
  const fbCommon::FB_LanguageBundle *sniper_rifles() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SNIPER_RIFLES);
  }
  const fbCommon::FB_LanguageBundle *animal_whisperer() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ANIMAL_WHISPERER);
  }
  const fbCommon::FB_LanguageBundle *explosives() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EXPLOSIVES);
  }
  const fbCommon::FB_LanguageBundle *first_aid() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_FIRST_AID);
  }
  const fbCommon::FB_LanguageBundle *sneaky_shit() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SNEAKY_SHIT);
  }
  const fbCommon::FB_LanguageBundle *weird_science() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_WEIRD_SCIENCE);
  }
  const fbCommon::FB_LanguageBundle *armor_modding() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_ARMOR_MODDING);
  }
  const fbCommon::FB_LanguageBundle *lockpicking() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_LOCKPICKING);
  }
  const fbCommon::FB_LanguageBundle *nerd_stuff() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_NERD_STUFF);
  }
  const fbCommon::FB_LanguageBundle *mechanics() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_MECHANICS);
  }
  const fbCommon::FB_LanguageBundle *survival() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SURVIVAL);
  }
  const fbCommon::FB_LanguageBundle *toaster_repair() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_TOASTER_REPAIR);
  }
  const fbCommon::FB_LanguageBundle *weapon_modding() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_WEAPON_MODDING);
  }
  const fbCommon::FB_LanguageBundle *barter() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_BARTER);
  }
  const fbCommon::FB_LanguageBundle *hard_ass() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_HARD_ASS);
  }
  const fbCommon::FB_LanguageBundle *kiss_ass() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_KISS_ASS);
  }
  const fbCommon::FB_LanguageBundle *leadership() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_LEADERSHIP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AUTOMATIC_WEAPONS) &&
           verifier.VerifyTable(automatic_weapons()) &&
           VerifyOffset(verifier, VT_BIG_GUNS) &&
           verifier.VerifyTable(big_guns()) &&
           VerifyOffset(verifier, VT_BRAWLING) &&
           verifier.VerifyTable(brawling()) &&
           VerifyOffset(verifier, VT_MELEE_COMBAT) &&
           verifier.VerifyTable(melee_combat()) &&
           VerifyOffset(verifier, VT_SMALL_ARMS) &&
           verifier.VerifyTable(small_arms()) &&
           VerifyOffset(verifier, VT_SNIPER_RIFLES) &&
           verifier.VerifyTable(sniper_rifles()) &&
           VerifyOffset(verifier, VT_ANIMAL_WHISPERER) &&
           verifier.VerifyTable(animal_whisperer()) &&
           VerifyOffset(verifier, VT_EXPLOSIVES) &&
           verifier.VerifyTable(explosives()) &&
           VerifyOffset(verifier, VT_FIRST_AID) &&
           verifier.VerifyTable(first_aid()) &&
           VerifyOffset(verifier, VT_SNEAKY_SHIT) &&
           verifier.VerifyTable(sneaky_shit()) &&
           VerifyOffset(verifier, VT_WEIRD_SCIENCE) &&
           verifier.VerifyTable(weird_science()) &&
           VerifyOffset(verifier, VT_ARMOR_MODDING) &&
           verifier.VerifyTable(armor_modding()) &&
           VerifyOffset(verifier, VT_LOCKPICKING) &&
           verifier.VerifyTable(lockpicking()) &&
           VerifyOffset(verifier, VT_NERD_STUFF) &&
           verifier.VerifyTable(nerd_stuff()) &&
           VerifyOffset(verifier, VT_MECHANICS) &&
           verifier.VerifyTable(mechanics()) &&
           VerifyOffset(verifier, VT_SURVIVAL) &&
           verifier.VerifyTable(survival()) &&
           VerifyOffset(verifier, VT_TOASTER_REPAIR) &&
           verifier.VerifyTable(toaster_repair()) &&
           VerifyOffset(verifier, VT_WEAPON_MODDING) &&
           verifier.VerifyTable(weapon_modding()) &&
           VerifyOffset(verifier, VT_BARTER) &&
           verifier.VerifyTable(barter()) &&
           VerifyOffset(verifier, VT_HARD_ASS) &&
           verifier.VerifyTable(hard_ass()) &&
           VerifyOffset(verifier, VT_KISS_ASS) &&
           verifier.VerifyTable(kiss_ass()) &&
           VerifyOffset(verifier, VT_LEADERSHIP) &&
           verifier.VerifyTable(leadership()) &&
           verifier.EndTable();
  }
};

struct FB_SkillTextTypeBuilder {
  typedef FB_SkillTextType Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_automatic_weapons(flatbuffers::Offset<fbCommon::FB_LanguageBundle> automatic_weapons) {
    fbb_.AddOffset(FB_SkillTextType::VT_AUTOMATIC_WEAPONS, automatic_weapons);
  }
  void add_big_guns(flatbuffers::Offset<fbCommon::FB_LanguageBundle> big_guns) {
    fbb_.AddOffset(FB_SkillTextType::VT_BIG_GUNS, big_guns);
  }
  void add_brawling(flatbuffers::Offset<fbCommon::FB_LanguageBundle> brawling) {
    fbb_.AddOffset(FB_SkillTextType::VT_BRAWLING, brawling);
  }
  void add_melee_combat(flatbuffers::Offset<fbCommon::FB_LanguageBundle> melee_combat) {
    fbb_.AddOffset(FB_SkillTextType::VT_MELEE_COMBAT, melee_combat);
  }
  void add_small_arms(flatbuffers::Offset<fbCommon::FB_LanguageBundle> small_arms) {
    fbb_.AddOffset(FB_SkillTextType::VT_SMALL_ARMS, small_arms);
  }
  void add_sniper_rifles(flatbuffers::Offset<fbCommon::FB_LanguageBundle> sniper_rifles) {
    fbb_.AddOffset(FB_SkillTextType::VT_SNIPER_RIFLES, sniper_rifles);
  }
  void add_animal_whisperer(flatbuffers::Offset<fbCommon::FB_LanguageBundle> animal_whisperer) {
    fbb_.AddOffset(FB_SkillTextType::VT_ANIMAL_WHISPERER, animal_whisperer);
  }
  void add_explosives(flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosives) {
    fbb_.AddOffset(FB_SkillTextType::VT_EXPLOSIVES, explosives);
  }
  void add_first_aid(flatbuffers::Offset<fbCommon::FB_LanguageBundle> first_aid) {
    fbb_.AddOffset(FB_SkillTextType::VT_FIRST_AID, first_aid);
  }
  void add_sneaky_shit(flatbuffers::Offset<fbCommon::FB_LanguageBundle> sneaky_shit) {
    fbb_.AddOffset(FB_SkillTextType::VT_SNEAKY_SHIT, sneaky_shit);
  }
  void add_weird_science(flatbuffers::Offset<fbCommon::FB_LanguageBundle> weird_science) {
    fbb_.AddOffset(FB_SkillTextType::VT_WEIRD_SCIENCE, weird_science);
  }
  void add_armor_modding(flatbuffers::Offset<fbCommon::FB_LanguageBundle> armor_modding) {
    fbb_.AddOffset(FB_SkillTextType::VT_ARMOR_MODDING, armor_modding);
  }
  void add_lockpicking(flatbuffers::Offset<fbCommon::FB_LanguageBundle> lockpicking) {
    fbb_.AddOffset(FB_SkillTextType::VT_LOCKPICKING, lockpicking);
  }
  void add_nerd_stuff(flatbuffers::Offset<fbCommon::FB_LanguageBundle> nerd_stuff) {
    fbb_.AddOffset(FB_SkillTextType::VT_NERD_STUFF, nerd_stuff);
  }
  void add_mechanics(flatbuffers::Offset<fbCommon::FB_LanguageBundle> mechanics) {
    fbb_.AddOffset(FB_SkillTextType::VT_MECHANICS, mechanics);
  }
  void add_survival(flatbuffers::Offset<fbCommon::FB_LanguageBundle> survival) {
    fbb_.AddOffset(FB_SkillTextType::VT_SURVIVAL, survival);
  }
  void add_toaster_repair(flatbuffers::Offset<fbCommon::FB_LanguageBundle> toaster_repair) {
    fbb_.AddOffset(FB_SkillTextType::VT_TOASTER_REPAIR, toaster_repair);
  }
  void add_weapon_modding(flatbuffers::Offset<fbCommon::FB_LanguageBundle> weapon_modding) {
    fbb_.AddOffset(FB_SkillTextType::VT_WEAPON_MODDING, weapon_modding);
  }
  void add_barter(flatbuffers::Offset<fbCommon::FB_LanguageBundle> barter) {
    fbb_.AddOffset(FB_SkillTextType::VT_BARTER, barter);
  }
  void add_hard_ass(flatbuffers::Offset<fbCommon::FB_LanguageBundle> hard_ass) {
    fbb_.AddOffset(FB_SkillTextType::VT_HARD_ASS, hard_ass);
  }
  void add_kiss_ass(flatbuffers::Offset<fbCommon::FB_LanguageBundle> kiss_ass) {
    fbb_.AddOffset(FB_SkillTextType::VT_KISS_ASS, kiss_ass);
  }
  void add_leadership(flatbuffers::Offset<fbCommon::FB_LanguageBundle> leadership) {
    fbb_.AddOffset(FB_SkillTextType::VT_LEADERSHIP, leadership);
  }
  explicit FB_SkillTextTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_SkillTextType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_SkillTextType>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_SkillTextType> CreateFB_SkillTextType(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> automatic_weapons = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> big_guns = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> brawling = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> melee_combat = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> small_arms = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> sniper_rifles = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> animal_whisperer = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> explosives = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> first_aid = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> sneaky_shit = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> weird_science = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> armor_modding = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> lockpicking = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> nerd_stuff = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> mechanics = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> survival = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> toaster_repair = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> weapon_modding = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> barter = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> hard_ass = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> kiss_ass = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> leadership = 0) {
  FB_SkillTextTypeBuilder builder_(_fbb);
  builder_.add_leadership(leadership);
  builder_.add_kiss_ass(kiss_ass);
  builder_.add_hard_ass(hard_ass);
  builder_.add_barter(barter);
  builder_.add_weapon_modding(weapon_modding);
  builder_.add_toaster_repair(toaster_repair);
  builder_.add_survival(survival);
  builder_.add_mechanics(mechanics);
  builder_.add_nerd_stuff(nerd_stuff);
  builder_.add_lockpicking(lockpicking);
  builder_.add_armor_modding(armor_modding);
  builder_.add_weird_science(weird_science);
  builder_.add_sneaky_shit(sneaky_shit);
  builder_.add_first_aid(first_aid);
  builder_.add_explosives(explosives);
  builder_.add_animal_whisperer(animal_whisperer);
  builder_.add_sniper_rifles(sniper_rifles);
  builder_.add_small_arms(small_arms);
  builder_.add_melee_combat(melee_combat);
  builder_.add_brawling(brawling);
  builder_.add_big_guns(big_guns);
  builder_.add_automatic_weapons(automatic_weapons);
  return builder_.Finish();
}

struct FB_SkillTextGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_SkillTextGroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMBAT = 4,
    VT_GENERAL = 6,
    VT_EXPLORATION = 8,
    VT_SOCIAL = 10
  };
  const fbCommon::FB_LanguageBundle *combat() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COMBAT);
  }
  const fbCommon::FB_LanguageBundle *general() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_GENERAL);
  }
  const fbCommon::FB_LanguageBundle *exploration() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_EXPLORATION);
  }
  const fbCommon::FB_LanguageBundle *social() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SOCIAL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMBAT) &&
           verifier.VerifyTable(combat()) &&
           VerifyOffset(verifier, VT_GENERAL) &&
           verifier.VerifyTable(general()) &&
           VerifyOffset(verifier, VT_EXPLORATION) &&
           verifier.VerifyTable(exploration()) &&
           VerifyOffset(verifier, VT_SOCIAL) &&
           verifier.VerifyTable(social()) &&
           verifier.EndTable();
  }
};

struct FB_SkillTextGroupBuilder {
  typedef FB_SkillTextGroup Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_combat(flatbuffers::Offset<fbCommon::FB_LanguageBundle> combat) {
    fbb_.AddOffset(FB_SkillTextGroup::VT_COMBAT, combat);
  }
  void add_general(flatbuffers::Offset<fbCommon::FB_LanguageBundle> general) {
    fbb_.AddOffset(FB_SkillTextGroup::VT_GENERAL, general);
  }
  void add_exploration(flatbuffers::Offset<fbCommon::FB_LanguageBundle> exploration) {
    fbb_.AddOffset(FB_SkillTextGroup::VT_EXPLORATION, exploration);
  }
  void add_social(flatbuffers::Offset<fbCommon::FB_LanguageBundle> social) {
    fbb_.AddOffset(FB_SkillTextGroup::VT_SOCIAL, social);
  }
  explicit FB_SkillTextGroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_SkillTextGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_SkillTextGroup>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_SkillTextGroup> CreateFB_SkillTextGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> combat = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> general = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> exploration = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> social = 0) {
  FB_SkillTextGroupBuilder builder_(_fbb);
  builder_.add_social(social);
  builder_.add_exploration(exploration);
  builder_.add_general(general);
  builder_.add_combat(combat);
  return builder_.Finish();
}

struct FB_SkillText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_SkillTextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESCR = 6,
    VT_GROUP = 8
  };
  const fbSkill::FB_SkillTextType *name() const {
    return GetPointer<const fbSkill::FB_SkillTextType *>(VT_NAME);
  }
  const fbSkill::FB_SkillTextType *descr() const {
    return GetPointer<const fbSkill::FB_SkillTextType *>(VT_DESCR);
  }
  const fbSkill::FB_SkillTextGroup *group() const {
    return GetPointer<const fbSkill::FB_SkillTextGroup *>(VT_GROUP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_DESCR) &&
           verifier.VerifyTable(descr()) &&
           VerifyOffset(verifier, VT_GROUP) &&
           verifier.VerifyTable(group()) &&
           verifier.EndTable();
  }
};

struct FB_SkillTextBuilder {
  typedef FB_SkillText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<fbSkill::FB_SkillTextType> name) {
    fbb_.AddOffset(FB_SkillText::VT_NAME, name);
  }
  void add_descr(flatbuffers::Offset<fbSkill::FB_SkillTextType> descr) {
    fbb_.AddOffset(FB_SkillText::VT_DESCR, descr);
  }
  void add_group(flatbuffers::Offset<fbSkill::FB_SkillTextGroup> group) {
    fbb_.AddOffset(FB_SkillText::VT_GROUP, group);
  }
  explicit FB_SkillTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_SkillText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_SkillText>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_SkillText> CreateFB_SkillText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbSkill::FB_SkillTextType> name = 0,
    flatbuffers::Offset<fbSkill::FB_SkillTextType> descr = 0,
    flatbuffers::Offset<fbSkill::FB_SkillTextGroup> group = 0) {
  FB_SkillTextBuilder builder_(_fbb);
  builder_.add_group(group);
  builder_.add_descr(descr);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const fbSkill::FB_SkillText *GetFB_SkillText(const void *buf) {
  return flatbuffers::GetRoot<fbSkill::FB_SkillText>(buf);
}

inline const fbSkill::FB_SkillText *GetSizePrefixedFB_SkillText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbSkill::FB_SkillText>(buf);
}

inline const char *FB_SkillTextIdentifier() {
  return "SKLT";
}

inline bool FB_SkillTextBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_SkillTextIdentifier());
}

inline bool VerifyFB_SkillTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbSkill::FB_SkillText>(FB_SkillTextIdentifier());
}

inline bool VerifySizePrefixedFB_SkillTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbSkill::FB_SkillText>(FB_SkillTextIdentifier());
}

inline const char *FB_SkillTextExtension() {
  return "bundle";
}

inline void FinishFB_SkillTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbSkill::FB_SkillText> root) {
  fbb.Finish(root, FB_SkillTextIdentifier());
}

inline void FinishSizePrefixedFB_SkillTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbSkill::FB_SkillText> root) {
  fbb.FinishSizePrefixed(root, FB_SkillTextIdentifier());
}

}  // namespace fbSkill

#endif  // FLATBUFFERS_GENERATED_SKILLTEXTFB_FBSKILL_H_
