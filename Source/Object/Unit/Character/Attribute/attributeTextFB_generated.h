// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRIBUTETEXTFB_FBATTRIBUTE_H_
#define FLATBUFFERS_GENERATED_ATTRIBUTETEXTFB_FBATTRIBUTE_H_

#include "flatbuffers/flatbuffers.h"

#include "languageBundleFB_generated.h"

namespace fbAttribute {

struct FB_AttributeTextType;
struct FB_AttributeTextTypeBuilder;

struct FB_AttributeText;
struct FB_AttributeTextBuilder;

struct FB_AttributeTextType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttributeTextTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COORDINATION = 4,
    VT_LUCK = 6,
    VT_AWARENESS = 8,
    VT_STRENGTH = 10,
    VT_SPEED = 12,
    VT_INTELLIGENCE = 14,
    VT_CHARISMA = 16
  };
  const fbCommon::FB_LanguageBundle *coordination() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_COORDINATION);
  }
  const fbCommon::FB_LanguageBundle *luck() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_LUCK);
  }
  const fbCommon::FB_LanguageBundle *awareness() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_AWARENESS);
  }
  const fbCommon::FB_LanguageBundle *strength() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_STRENGTH);
  }
  const fbCommon::FB_LanguageBundle *speed() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_SPEED);
  }
  const fbCommon::FB_LanguageBundle *intelligence() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_INTELLIGENCE);
  }
  const fbCommon::FB_LanguageBundle *charisma() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_CHARISMA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COORDINATION) &&
           verifier.VerifyTable(coordination()) &&
           VerifyOffset(verifier, VT_LUCK) &&
           verifier.VerifyTable(luck()) &&
           VerifyOffset(verifier, VT_AWARENESS) &&
           verifier.VerifyTable(awareness()) &&
           VerifyOffset(verifier, VT_STRENGTH) &&
           verifier.VerifyTable(strength()) &&
           VerifyOffset(verifier, VT_SPEED) &&
           verifier.VerifyTable(speed()) &&
           VerifyOffset(verifier, VT_INTELLIGENCE) &&
           verifier.VerifyTable(intelligence()) &&
           VerifyOffset(verifier, VT_CHARISMA) &&
           verifier.VerifyTable(charisma()) &&
           verifier.EndTable();
  }
};

struct FB_AttributeTextTypeBuilder {
  typedef FB_AttributeTextType Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_coordination(flatbuffers::Offset<fbCommon::FB_LanguageBundle> coordination) {
    fbb_.AddOffset(FB_AttributeTextType::VT_COORDINATION, coordination);
  }
  void add_luck(flatbuffers::Offset<fbCommon::FB_LanguageBundle> luck) {
    fbb_.AddOffset(FB_AttributeTextType::VT_LUCK, luck);
  }
  void add_awareness(flatbuffers::Offset<fbCommon::FB_LanguageBundle> awareness) {
    fbb_.AddOffset(FB_AttributeTextType::VT_AWARENESS, awareness);
  }
  void add_strength(flatbuffers::Offset<fbCommon::FB_LanguageBundle> strength) {
    fbb_.AddOffset(FB_AttributeTextType::VT_STRENGTH, strength);
  }
  void add_speed(flatbuffers::Offset<fbCommon::FB_LanguageBundle> speed) {
    fbb_.AddOffset(FB_AttributeTextType::VT_SPEED, speed);
  }
  void add_intelligence(flatbuffers::Offset<fbCommon::FB_LanguageBundle> intelligence) {
    fbb_.AddOffset(FB_AttributeTextType::VT_INTELLIGENCE, intelligence);
  }
  void add_charisma(flatbuffers::Offset<fbCommon::FB_LanguageBundle> charisma) {
    fbb_.AddOffset(FB_AttributeTextType::VT_CHARISMA, charisma);
  }
  explicit FB_AttributeTextTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AttributeTextType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AttributeTextType>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AttributeTextType> CreateFB_AttributeTextType(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> coordination = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> luck = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> awareness = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> strength = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> speed = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> intelligence = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> charisma = 0) {
  FB_AttributeTextTypeBuilder builder_(_fbb);
  builder_.add_charisma(charisma);
  builder_.add_intelligence(intelligence);
  builder_.add_speed(speed);
  builder_.add_strength(strength);
  builder_.add_awareness(awareness);
  builder_.add_luck(luck);
  builder_.add_coordination(coordination);
  return builder_.Finish();
}

struct FB_AttributeText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttributeTextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESCR = 6
  };
  const fbAttribute::FB_AttributeTextType *name() const {
    return GetPointer<const fbAttribute::FB_AttributeTextType *>(VT_NAME);
  }
  const fbAttribute::FB_AttributeTextType *descr() const {
    return GetPointer<const fbAttribute::FB_AttributeTextType *>(VT_DESCR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_DESCR) &&
           verifier.VerifyTable(descr()) &&
           verifier.EndTable();
  }
};

struct FB_AttributeTextBuilder {
  typedef FB_AttributeText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<fbAttribute::FB_AttributeTextType> name) {
    fbb_.AddOffset(FB_AttributeText::VT_NAME, name);
  }
  void add_descr(flatbuffers::Offset<fbAttribute::FB_AttributeTextType> descr) {
    fbb_.AddOffset(FB_AttributeText::VT_DESCR, descr);
  }
  explicit FB_AttributeTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AttributeText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AttributeText>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AttributeText> CreateFB_AttributeText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttribute::FB_AttributeTextType> name = 0,
    flatbuffers::Offset<fbAttribute::FB_AttributeTextType> descr = 0) {
  FB_AttributeTextBuilder builder_(_fbb);
  builder_.add_descr(descr);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const fbAttribute::FB_AttributeText *GetFB_AttributeText(const void *buf) {
  return flatbuffers::GetRoot<fbAttribute::FB_AttributeText>(buf);
}

inline const fbAttribute::FB_AttributeText *GetSizePrefixedFB_AttributeText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbAttribute::FB_AttributeText>(buf);
}

inline const char *FB_AttributeTextIdentifier() {
  return "ATTT";
}

inline bool FB_AttributeTextBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_AttributeTextIdentifier());
}

inline bool VerifyFB_AttributeTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbAttribute::FB_AttributeText>(FB_AttributeTextIdentifier());
}

inline bool VerifySizePrefixedFB_AttributeTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbAttribute::FB_AttributeText>(FB_AttributeTextIdentifier());
}

inline const char *FB_AttributeTextExtension() {
  return "bundle";
}

inline void FinishFB_AttributeTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAttribute::FB_AttributeText> root) {
  fbb.Finish(root, FB_AttributeTextIdentifier());
}

inline void FinishSizePrefixedFB_AttributeTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAttribute::FB_AttributeText> root) {
  fbb.FinishSizePrefixed(root, FB_AttributeTextIdentifier());
}

}  // namespace fbAttribute

#endif  // FLATBUFFERS_GENERATED_ATTRIBUTETEXTFB_FBATTRIBUTE_H_
