// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRIBUTE_GAME_OBJECT_H_
#define FLATBUFFERS_GENERATED_ATTRIBUTE_GAME_OBJECT_H_

#include "flatbuffers/flatbuffers.h"

namespace Game {
namespace Object {

struct FB_PointAttributeDistribution;

struct FB_Attribute;
struct FB_AttributeBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) FB_PointAttributeDistribution FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t a_[2];

 public:
  FB_PointAttributeDistribution()
      : a_() {
  }
  FB_PointAttributeDistribution(flatbuffers::span<const int8_t, 2> _a) {
    flatbuffers::CastToArray(a_).CopyFromSpan(_a);
  }
  const flatbuffers::Array<int8_t, 2> *a() const {
    return &flatbuffers::CastToArray(a_);
  }
};
FLATBUFFERS_STRUCT_END(FB_PointAttributeDistribution, 2);

struct FB_Attribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttributeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN_ATTR_POINTS = 4,
    VT_MAX_ATTR_POINTS = 6,
    VT_INIT_ATTR_POINTS = 8,
    VT_MIN_ATTR_LEVEL = 10,
    VT_MAX_ATTR_LEVEL = 12,
    VT_INIT_ATTR_LEVEL = 14,
    VT_POINT_ATTR_DISTR = 16
  };
  int8_t min_attr_points() const {
    return GetField<int8_t>(VT_MIN_ATTR_POINTS, 0);
  }
  int8_t max_attr_points() const {
    return GetField<int8_t>(VT_MAX_ATTR_POINTS, 0);
  }
  int8_t init_attr_points() const {
    return GetField<int8_t>(VT_INIT_ATTR_POINTS, 0);
  }
  int8_t min_attr_level() const {
    return GetField<int8_t>(VT_MIN_ATTR_LEVEL, 0);
  }
  int8_t max_attr_level() const {
    return GetField<int8_t>(VT_MAX_ATTR_LEVEL, 0);
  }
  int8_t init_attr_level() const {
    return GetField<int8_t>(VT_INIT_ATTR_LEVEL, 0);
  }
  const Game::Object::FB_PointAttributeDistribution *point_attr_distr() const {
    return GetStruct<const Game::Object::FB_PointAttributeDistribution *>(VT_POINT_ATTR_DISTR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MIN_ATTR_POINTS) &&
           VerifyField<int8_t>(verifier, VT_MAX_ATTR_POINTS) &&
           VerifyField<int8_t>(verifier, VT_INIT_ATTR_POINTS) &&
           VerifyField<int8_t>(verifier, VT_MIN_ATTR_LEVEL) &&
           VerifyField<int8_t>(verifier, VT_MAX_ATTR_LEVEL) &&
           VerifyField<int8_t>(verifier, VT_INIT_ATTR_LEVEL) &&
           VerifyField<Game::Object::FB_PointAttributeDistribution>(verifier, VT_POINT_ATTR_DISTR) &&
           verifier.EndTable();
  }
};

struct FB_AttributeBuilder {
  typedef FB_Attribute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_min_attr_points(int8_t min_attr_points) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_MIN_ATTR_POINTS, min_attr_points, 0);
  }
  void add_max_attr_points(int8_t max_attr_points) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_MAX_ATTR_POINTS, max_attr_points, 0);
  }
  void add_init_attr_points(int8_t init_attr_points) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_INIT_ATTR_POINTS, init_attr_points, 0);
  }
  void add_min_attr_level(int8_t min_attr_level) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_MIN_ATTR_LEVEL, min_attr_level, 0);
  }
  void add_max_attr_level(int8_t max_attr_level) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_MAX_ATTR_LEVEL, max_attr_level, 0);
  }
  void add_init_attr_level(int8_t init_attr_level) {
    fbb_.AddElement<int8_t>(FB_Attribute::VT_INIT_ATTR_LEVEL, init_attr_level, 0);
  }
  void add_point_attr_distr(const Game::Object::FB_PointAttributeDistribution *point_attr_distr) {
    fbb_.AddStruct(FB_Attribute::VT_POINT_ATTR_DISTR, point_attr_distr);
  }
  explicit FB_AttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_Attribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_Attribute>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_Attribute> CreateFB_Attribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t min_attr_points = 0,
    int8_t max_attr_points = 0,
    int8_t init_attr_points = 0,
    int8_t min_attr_level = 0,
    int8_t max_attr_level = 0,
    int8_t init_attr_level = 0,
    const Game::Object::FB_PointAttributeDistribution *point_attr_distr = 0) {
  FB_AttributeBuilder builder_(_fbb);
  builder_.add_point_attr_distr(point_attr_distr);
  builder_.add_init_attr_level(init_attr_level);
  builder_.add_max_attr_level(max_attr_level);
  builder_.add_min_attr_level(min_attr_level);
  builder_.add_init_attr_points(init_attr_points);
  builder_.add_max_attr_points(max_attr_points);
  builder_.add_min_attr_points(min_attr_points);
  return builder_.Finish();
}

inline const Game::Object::FB_Attribute *GetFB_Attribute(const void *buf) {
  return flatbuffers::GetRoot<Game::Object::FB_Attribute>(buf);
}

inline const Game::Object::FB_Attribute *GetSizePrefixedFB_Attribute(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Game::Object::FB_Attribute>(buf);
}

inline const char *FB_AttributeIdentifier() {
  return "ATTR";
}

inline bool FB_AttributeBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_AttributeIdentifier());
}

inline bool VerifyFB_AttributeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Game::Object::FB_Attribute>(FB_AttributeIdentifier());
}

inline bool VerifySizePrefixedFB_AttributeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Game::Object::FB_Attribute>(FB_AttributeIdentifier());
}

inline const char *FB_AttributeExtension() {
  return "bundle";
}

inline void FinishFB_AttributeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::Object::FB_Attribute> root) {
  fbb.Finish(root, FB_AttributeIdentifier());
}

inline void FinishSizePrefixedFB_AttributeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::Object::FB_Attribute> root) {
  fbb.FinishSizePrefixed(root, FB_AttributeIdentifier());
}

}  // namespace Object
}  // namespace Game

#endif  // FLATBUFFERS_GENERATED_ATTRIBUTE_GAME_OBJECT_H_
