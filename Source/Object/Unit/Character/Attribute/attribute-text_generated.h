// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRIBUTETEXT_GAME_OBJECT_FBATTRIBUTE_H_
#define FLATBUFFERS_GENERATED_ATTRIBUTETEXT_GAME_OBJECT_FBATTRIBUTE_H_

#include "flatbuffers/flatbuffers.h"

namespace Game {
namespace Object {
namespace fbAttribute {

struct FB_AttributeTextType;
struct FB_AttributeTextTypeBuilder;

struct FB_LanguageBundle;
struct FB_LanguageBundleBuilder;

struct FB_AttributeText;
struct FB_AttributeTextBuilder;

struct FB_AttributeTextType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttributeTextTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COORDINATION = 4,
    VT_LUCK = 6,
    VT_AWARENESS = 8,
    VT_STRENGTH = 10,
    VT_SPEED = 12,
    VT_INTELLIGENCE = 14,
    VT_CHARISMA = 16
  };
  const flatbuffers::String *coordination() const {
    return GetPointer<const flatbuffers::String *>(VT_COORDINATION);
  }
  const flatbuffers::String *luck() const {
    return GetPointer<const flatbuffers::String *>(VT_LUCK);
  }
  const flatbuffers::String *awareness() const {
    return GetPointer<const flatbuffers::String *>(VT_AWARENESS);
  }
  const flatbuffers::String *strength() const {
    return GetPointer<const flatbuffers::String *>(VT_STRENGTH);
  }
  const flatbuffers::String *speed() const {
    return GetPointer<const flatbuffers::String *>(VT_SPEED);
  }
  const flatbuffers::String *intelligence() const {
    return GetPointer<const flatbuffers::String *>(VT_INTELLIGENCE);
  }
  const flatbuffers::String *charisma() const {
    return GetPointer<const flatbuffers::String *>(VT_CHARISMA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COORDINATION) &&
           verifier.VerifyString(coordination()) &&
           VerifyOffset(verifier, VT_LUCK) &&
           verifier.VerifyString(luck()) &&
           VerifyOffset(verifier, VT_AWARENESS) &&
           verifier.VerifyString(awareness()) &&
           VerifyOffset(verifier, VT_STRENGTH) &&
           verifier.VerifyString(strength()) &&
           VerifyOffset(verifier, VT_SPEED) &&
           verifier.VerifyString(speed()) &&
           VerifyOffset(verifier, VT_INTELLIGENCE) &&
           verifier.VerifyString(intelligence()) &&
           VerifyOffset(verifier, VT_CHARISMA) &&
           verifier.VerifyString(charisma()) &&
           verifier.EndTable();
  }
};

struct FB_AttributeTextTypeBuilder {
  typedef FB_AttributeTextType Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_coordination(flatbuffers::Offset<flatbuffers::String> coordination) {
    fbb_.AddOffset(FB_AttributeTextType::VT_COORDINATION, coordination);
  }
  void add_luck(flatbuffers::Offset<flatbuffers::String> luck) {
    fbb_.AddOffset(FB_AttributeTextType::VT_LUCK, luck);
  }
  void add_awareness(flatbuffers::Offset<flatbuffers::String> awareness) {
    fbb_.AddOffset(FB_AttributeTextType::VT_AWARENESS, awareness);
  }
  void add_strength(flatbuffers::Offset<flatbuffers::String> strength) {
    fbb_.AddOffset(FB_AttributeTextType::VT_STRENGTH, strength);
  }
  void add_speed(flatbuffers::Offset<flatbuffers::String> speed) {
    fbb_.AddOffset(FB_AttributeTextType::VT_SPEED, speed);
  }
  void add_intelligence(flatbuffers::Offset<flatbuffers::String> intelligence) {
    fbb_.AddOffset(FB_AttributeTextType::VT_INTELLIGENCE, intelligence);
  }
  void add_charisma(flatbuffers::Offset<flatbuffers::String> charisma) {
    fbb_.AddOffset(FB_AttributeTextType::VT_CHARISMA, charisma);
  }
  explicit FB_AttributeTextTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AttributeTextType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AttributeTextType>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AttributeTextType> CreateFB_AttributeTextType(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> coordination = 0,
    flatbuffers::Offset<flatbuffers::String> luck = 0,
    flatbuffers::Offset<flatbuffers::String> awareness = 0,
    flatbuffers::Offset<flatbuffers::String> strength = 0,
    flatbuffers::Offset<flatbuffers::String> speed = 0,
    flatbuffers::Offset<flatbuffers::String> intelligence = 0,
    flatbuffers::Offset<flatbuffers::String> charisma = 0) {
  FB_AttributeTextTypeBuilder builder_(_fbb);
  builder_.add_charisma(charisma);
  builder_.add_intelligence(intelligence);
  builder_.add_speed(speed);
  builder_.add_strength(strength);
  builder_.add_awareness(awareness);
  builder_.add_luck(luck);
  builder_.add_coordination(coordination);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_AttributeTextType> CreateFB_AttributeTextTypeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *coordination = nullptr,
    const char *luck = nullptr,
    const char *awareness = nullptr,
    const char *strength = nullptr,
    const char *speed = nullptr,
    const char *intelligence = nullptr,
    const char *charisma = nullptr) {
  auto coordination__ = coordination ? _fbb.CreateString(coordination) : 0;
  auto luck__ = luck ? _fbb.CreateString(luck) : 0;
  auto awareness__ = awareness ? _fbb.CreateString(awareness) : 0;
  auto strength__ = strength ? _fbb.CreateString(strength) : 0;
  auto speed__ = speed ? _fbb.CreateString(speed) : 0;
  auto intelligence__ = intelligence ? _fbb.CreateString(intelligence) : 0;
  auto charisma__ = charisma ? _fbb.CreateString(charisma) : 0;
  return Game::Object::fbAttribute::CreateFB_AttributeTextType(
      _fbb,
      coordination__,
      luck__,
      awareness__,
      strength__,
      speed__,
      intelligence__,
      charisma__);
}

struct FB_LanguageBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_LanguageBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESCR = 6
  };
  const Game::Object::fbAttribute::FB_AttributeTextType *name() const {
    return GetPointer<const Game::Object::fbAttribute::FB_AttributeTextType *>(VT_NAME);
  }
  const Game::Object::fbAttribute::FB_AttributeTextType *descr() const {
    return GetPointer<const Game::Object::fbAttribute::FB_AttributeTextType *>(VT_DESCR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_DESCR) &&
           verifier.VerifyTable(descr()) &&
           verifier.EndTable();
  }
};

struct FB_LanguageBundleBuilder {
  typedef FB_LanguageBundle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeTextType> name) {
    fbb_.AddOffset(FB_LanguageBundle::VT_NAME, name);
  }
  void add_descr(flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeTextType> descr) {
    fbb_.AddOffset(FB_LanguageBundle::VT_DESCR, descr);
  }
  explicit FB_LanguageBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_LanguageBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_LanguageBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_LanguageBundle> CreateFB_LanguageBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeTextType> name = 0,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeTextType> descr = 0) {
  FB_LanguageBundleBuilder builder_(_fbb);
  builder_.add_descr(descr);
  builder_.add_name(name);
  return builder_.Finish();
}

struct FB_AttributeText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttributeTextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EN = 4,
    VT_RU = 6
  };
  const Game::Object::fbAttribute::FB_LanguageBundle *en() const {
    return GetPointer<const Game::Object::fbAttribute::FB_LanguageBundle *>(VT_EN);
  }
  const Game::Object::fbAttribute::FB_LanguageBundle *ru() const {
    return GetPointer<const Game::Object::fbAttribute::FB_LanguageBundle *>(VT_RU);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EN) &&
           verifier.VerifyTable(en()) &&
           VerifyOffset(verifier, VT_RU) &&
           verifier.VerifyTable(ru()) &&
           verifier.EndTable();
  }
};

struct FB_AttributeTextBuilder {
  typedef FB_AttributeText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_en(flatbuffers::Offset<Game::Object::fbAttribute::FB_LanguageBundle> en) {
    fbb_.AddOffset(FB_AttributeText::VT_EN, en);
  }
  void add_ru(flatbuffers::Offset<Game::Object::fbAttribute::FB_LanguageBundle> ru) {
    fbb_.AddOffset(FB_AttributeText::VT_RU, ru);
  }
  explicit FB_AttributeTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AttributeText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AttributeText>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AttributeText> CreateFB_AttributeText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_LanguageBundle> en = 0,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_LanguageBundle> ru = 0) {
  FB_AttributeTextBuilder builder_(_fbb);
  builder_.add_ru(ru);
  builder_.add_en(en);
  return builder_.Finish();
}

inline const Game::Object::fbAttribute::FB_AttributeText *GetFB_AttributeText(const void *buf) {
  return flatbuffers::GetRoot<Game::Object::fbAttribute::FB_AttributeText>(buf);
}

inline const Game::Object::fbAttribute::FB_AttributeText *GetSizePrefixedFB_AttributeText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Game::Object::fbAttribute::FB_AttributeText>(buf);
}

inline const char *FB_AttributeTextIdentifier() {
  return "ATTT";
}

inline bool FB_AttributeTextBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_AttributeTextIdentifier());
}

inline bool VerifyFB_AttributeTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Game::Object::fbAttribute::FB_AttributeText>(FB_AttributeTextIdentifier());
}

inline bool VerifySizePrefixedFB_AttributeTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Game::Object::fbAttribute::FB_AttributeText>(FB_AttributeTextIdentifier());
}

inline const char *FB_AttributeTextExtension() {
  return "bundle";
}

inline void FinishFB_AttributeTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeText> root) {
  fbb.Finish(root, FB_AttributeTextIdentifier());
}

inline void FinishSizePrefixedFB_AttributeTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::Object::fbAttribute::FB_AttributeText> root) {
  fbb.FinishSizePrefixed(root, FB_AttributeTextIdentifier());
}

}  // namespace fbAttribute
}  // namespace Object
}  // namespace Game

#endif  // FLATBUFFERS_GENERATED_ATTRIBUTETEXT_GAME_OBJECT_FBATTRIBUTE_H_
