// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERREFERENCEFB_FBCHARACTER_H_
#define FLATBUFFERS_GENERATED_CHARACTERREFERENCEFB_FBCHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "weaponTypeFB_generated.h"
#include "characterModelFB_generated.h"
#include "skillFB_generated.h"
#include "attributeFB_generated.h"
#include "languageBundleFB_generated.h"
#include "characterTypeFB_generated.h"

namespace fbCharacter {

struct FB_CharacterReference;
struct FB_CharacterReferenceBuilder;

struct FB_CharacterReferenceContainer;
struct FB_CharacterReferenceContainerBuilder;

struct FB_CharacterReference FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterReferenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTRIBUTES = 4,
    VT_SKILLS = 6,
    VT_CHARACTER_MODEL = 8,
    VT_CHARACTER_TYPE = 10,
    VT_WEAPON_TYPES = 12,
    VT_NAME = 14,
    VT_DESCRIP = 16,
    VT_ENTERED_NAME = 18,
    VT_TIME_DETECT = 20,
    VT_XP = 22,
    VT_XP_REWARD = 24,
    VT_RANGE_LEADER = 26,
    VT_CON_MAX = 28,
    VT_CON_CURRENT = 30,
    VT_CON_PER_LEVEL = 32,
    VT_MUL_CRIT_DMG = 34,
    VT_MUL_COMBAT_SPEED = 36,
    VT_MUL_THROWING_RANGE = 38,
    VT_CHANCE_HIT = 40,
    VT_CHANCE_HIT_AR = 42,
    VT_CHANCE_HIT_SMG = 44,
    VT_CHANCE_HIT_HMG = 46,
    VT_CHANCE_HIT_FT = 48,
    VT_CHANCE_HIT_BRAWL = 50,
    VT_CHANCE_HIT_BLUNT = 52,
    VT_CHANCE_HIT_BLADED = 54,
    VT_CHANCE_HIT_SAPISTOL = 56,
    VT_CHANCE_HIT_REVOLVER = 58,
    VT_CHANCE_HIT_PUMPSG = 60,
    VT_CHANCE_HIT_AUTOSG = 62,
    VT_CHANCE_HIT_SR = 64,
    VT_CHANCE_HIT_NEARBY_ALLIES = 66,
    VT_CHANCE_CRIT_DMG_MULTI_KILL = 68,
    VT_CHANCE_CRIT_DMG = 70,
    VT_CHANCE_CRIT_HEAL = 72,
    VT_CHANCE_LUCK_ACTION = 74,
    VT_CHANCE_LUCK_CRIT_DMG = 76,
    VT_CHANCE_LUCK_MEGA_CRIT_DMG = 78,
    VT_CHANCE_LUCK_EVADE = 80,
    VT_CHANCE_LUCK_CRIT_RES = 82,
    VT_CHANCE_LUCK_DOUBLE_HEAL = 84,
    VT_CHANCE_LUCK_DOUBLE_MONEY = 86,
    VT_CHANCE_LUCK_DOUBLE_SCRAP = 88,
    VT_BONUS_HEAL = 90,
    VT_BONUS_CRIT_HEAL = 92,
    VT_BONUS_HEAL_REVIVE = 94,
    VT_BONUS_REPAIR = 96,
    VT_BONUS_XP = 98,
    VT_BONUS_MISSION_REWARD = 100,
    VT_BONUS_SCRAP = 102,
    VT_BONUS_SELL_VALUE = 104,
    VT_BONUS_BUY_COST = 106,
    VT_BONUS_SNEAK_DMG = 108,
    VT_BONUS_NORM_DMG = 110,
    VT_BONUS_MELEE_DMG = 112,
    VT_BONUS_RANGE_DMG = 114,
    VT_BONUS_FIRE_DMG = 116,
    VT_BONUS_COLD_DMG = 118,
    VT_BONUS_ENERGY_DMG = 120,
    VT_BONUS_EXPLOSIVE_DMG = 122,
    VT_BONUS_ANIMAL_COMPANION_DMG = 124,
    VT_BONUS_DMG_VS_ROBOT = 126,
    VT_BONUS_DMG_VS_VEHICLE = 128,
    VT_BONUS_DMG_VS_SYNTH = 130,
    VT_BONUS_DMG_VS_ANIMAL = 132,
    VT_BONUS_DMG_VS_MUTANT = 134,
    VT_BONUS_NORM_DMG_ON_BOSS_KILL = 136,
    VT_BONUS_CON_HEALED_ON_REVIVE = 138,
    VT_RES_STATUS_EFFECT = 140,
    VT_RES_CRIT_DMG = 142,
    VT_RES_FIRE_DMG = 144,
    VT_RES_COLD_DMG = 146,
    VT_RES_ENERGY_DMG = 148,
    VT_RES_EXPLOSIVE_DMG = 150,
    VT_EVASION = 152,
    VT_INITIATIVE = 154,
    VT_STRIKE = 156,
    VT_LEVEL = 158,
    VT_ARMOR = 160,
    VT_ARMOR_PENETRATION = 162,
    VT_AP_MAX = 164,
    VT_AP_CURRENT = 166,
    VT_MOV_DOWNED_TIME = 168,
    VT_PERCEPTION = 170,
    VT_RADIATION_RESISTANCE = 172
  };
  const fbAttribute::FB_Attribute *attributes() const {
    return GetPointer<const fbAttribute::FB_Attribute *>(VT_ATTRIBUTES);
  }
  const fbSkill::FB_Skill *skills() const {
    return GetPointer<const fbSkill::FB_Skill *>(VT_SKILLS);
  }
  fbCharacter::FB_CharacterModel character_model() const {
    return static_cast<fbCharacter::FB_CharacterModel>(GetField<int16_t>(VT_CHARACTER_MODEL, 0));
  }
  fbCharacter::FB_CharacterType character_type() const {
    return static_cast<fbCharacter::FB_CharacterType>(GetField<int8_t>(VT_CHARACTER_TYPE, 0));
  }
  const flatbuffers::Vector<int8_t> *weapon_types() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_WEAPON_TYPES);
  }
  const fbCommon::FB_LanguageBundle *name() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_NAME);
  }
  const fbCommon::FB_LanguageBundle *descrip() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DESCRIP);
  }
  const flatbuffers::String *entered_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ENTERED_NAME);
  }
  int32_t time_detect() const {
    return GetField<int32_t>(VT_TIME_DETECT, 1700);
  }
  int32_t xp() const {
    return GetField<int32_t>(VT_XP, 0);
  }
  int32_t xp_reward() const {
    return GetField<int32_t>(VT_XP_REWARD, 0);
  }
  int16_t range_leader() const {
    return GetField<int16_t>(VT_RANGE_LEADER, 0);
  }
  int16_t con_max() const {
    return GetField<int16_t>(VT_CON_MAX, 50);
  }
  int16_t con_current() const {
    return GetField<int16_t>(VT_CON_CURRENT, 50);
  }
  int16_t con_per_level() const {
    return GetField<int16_t>(VT_CON_PER_LEVEL, 0);
  }
  int16_t mul_crit_dmg() const {
    return GetField<int16_t>(VT_MUL_CRIT_DMG, 100);
  }
  int16_t mul_combat_speed() const {
    return GetField<int16_t>(VT_MUL_COMBAT_SPEED, 140);
  }
  int16_t mul_throwing_range() const {
    return GetField<int16_t>(VT_MUL_THROWING_RANGE, 100);
  }
  int16_t chance_hit() const {
    return GetField<int16_t>(VT_CHANCE_HIT, 0);
  }
  int16_t chance_hit_ar() const {
    return GetField<int16_t>(VT_CHANCE_HIT_AR, 0);
  }
  int16_t chance_hit_smg() const {
    return GetField<int16_t>(VT_CHANCE_HIT_SMG, 0);
  }
  int16_t chance_hit_hmg() const {
    return GetField<int16_t>(VT_CHANCE_HIT_HMG, 0);
  }
  int16_t chance_hit_ft() const {
    return GetField<int16_t>(VT_CHANCE_HIT_FT, 0);
  }
  int16_t chance_hit_brawl() const {
    return GetField<int16_t>(VT_CHANCE_HIT_BRAWL, 0);
  }
  int16_t chance_hit_blunt() const {
    return GetField<int16_t>(VT_CHANCE_HIT_BLUNT, 0);
  }
  int16_t chance_hit_bladed() const {
    return GetField<int16_t>(VT_CHANCE_HIT_BLADED, 0);
  }
  int16_t chance_hit_sapistol() const {
    return GetField<int16_t>(VT_CHANCE_HIT_SAPISTOL, 0);
  }
  int16_t chance_hit_revolver() const {
    return GetField<int16_t>(VT_CHANCE_HIT_REVOLVER, 0);
  }
  int16_t chance_hit_pumpsg() const {
    return GetField<int16_t>(VT_CHANCE_HIT_PUMPSG, 0);
  }
  int16_t chance_hit_autosg() const {
    return GetField<int16_t>(VT_CHANCE_HIT_AUTOSG, 0);
  }
  int16_t chance_hit_sr() const {
    return GetField<int16_t>(VT_CHANCE_HIT_SR, 0);
  }
  int16_t chance_hit_nearby_allies() const {
    return GetField<int16_t>(VT_CHANCE_HIT_NEARBY_ALLIES, 0);
  }
  int16_t chance_crit_dmg_multi_kill() const {
    return GetField<int16_t>(VT_CHANCE_CRIT_DMG_MULTI_KILL, 0);
  }
  int16_t chance_crit_dmg() const {
    return GetField<int16_t>(VT_CHANCE_CRIT_DMG, 0);
  }
  int16_t chance_crit_heal() const {
    return GetField<int16_t>(VT_CHANCE_CRIT_HEAL, 0);
  }
  int16_t chance_luck_action() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_ACTION, 0);
  }
  int16_t chance_luck_crit_dmg() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_CRIT_DMG, 0);
  }
  int16_t chance_luck_mega_crit_dmg() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_MEGA_CRIT_DMG, 0);
  }
  int16_t chance_luck_evade() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_EVADE, 0);
  }
  int16_t chance_luck_crit_res() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_CRIT_RES, 0);
  }
  int16_t chance_luck_double_heal() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_DOUBLE_HEAL, 0);
  }
  int16_t chance_luck_double_money() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_DOUBLE_MONEY, 0);
  }
  int16_t chance_luck_double_scrap() const {
    return GetField<int16_t>(VT_CHANCE_LUCK_DOUBLE_SCRAP, 0);
  }
  int16_t bonus_heal() const {
    return GetField<int16_t>(VT_BONUS_HEAL, 1000);
  }
  int16_t bonus_crit_heal() const {
    return GetField<int16_t>(VT_BONUS_CRIT_HEAL, 1000);
  }
  int16_t bonus_heal_revive() const {
    return GetField<int16_t>(VT_BONUS_HEAL_REVIVE, 1000);
  }
  int16_t bonus_repair() const {
    return GetField<int16_t>(VT_BONUS_REPAIR, 1000);
  }
  int16_t bonus_xp() const {
    return GetField<int16_t>(VT_BONUS_XP, 1000);
  }
  int16_t bonus_mission_reward() const {
    return GetField<int16_t>(VT_BONUS_MISSION_REWARD, 1000);
  }
  int16_t bonus_scrap() const {
    return GetField<int16_t>(VT_BONUS_SCRAP, 1000);
  }
  int16_t bonus_sell_value() const {
    return GetField<int16_t>(VT_BONUS_SELL_VALUE, 1000);
  }
  int16_t bonus_buy_cost() const {
    return GetField<int16_t>(VT_BONUS_BUY_COST, 1000);
  }
  int16_t bonus_sneak_dmg() const {
    return GetField<int16_t>(VT_BONUS_SNEAK_DMG, 1000);
  }
  int16_t bonus_norm_dmg() const {
    return GetField<int16_t>(VT_BONUS_NORM_DMG, 1000);
  }
  int16_t bonus_melee_dmg() const {
    return GetField<int16_t>(VT_BONUS_MELEE_DMG, 1000);
  }
  int16_t bonus_range_dmg() const {
    return GetField<int16_t>(VT_BONUS_RANGE_DMG, 1000);
  }
  int16_t bonus_fire_dmg() const {
    return GetField<int16_t>(VT_BONUS_FIRE_DMG, 1000);
  }
  int16_t bonus_cold_dmg() const {
    return GetField<int16_t>(VT_BONUS_COLD_DMG, 1000);
  }
  int16_t bonus_energy_dmg() const {
    return GetField<int16_t>(VT_BONUS_ENERGY_DMG, 1000);
  }
  int16_t bonus_explosive_dmg() const {
    return GetField<int16_t>(VT_BONUS_EXPLOSIVE_DMG, 1000);
  }
  int16_t bonus_animal_companion_dmg() const {
    return GetField<int16_t>(VT_BONUS_ANIMAL_COMPANION_DMG, 1000);
  }
  int16_t bonus_dmg_vs_robot() const {
    return GetField<int16_t>(VT_BONUS_DMG_VS_ROBOT, 1000);
  }
  int16_t bonus_dmg_vs_vehicle() const {
    return GetField<int16_t>(VT_BONUS_DMG_VS_VEHICLE, 1000);
  }
  int16_t bonus_dmg_vs_synth() const {
    return GetField<int16_t>(VT_BONUS_DMG_VS_SYNTH, 1000);
  }
  int16_t bonus_dmg_vs_animal() const {
    return GetField<int16_t>(VT_BONUS_DMG_VS_ANIMAL, 1000);
  }
  int16_t bonus_dmg_vs_mutant() const {
    return GetField<int16_t>(VT_BONUS_DMG_VS_MUTANT, 1000);
  }
  int16_t bonus_norm_dmg_on_boss_kill() const {
    return GetField<int16_t>(VT_BONUS_NORM_DMG_ON_BOSS_KILL, 1000);
  }
  int16_t bonus_con_healed_on_revive() const {
    return GetField<int16_t>(VT_BONUS_CON_HEALED_ON_REVIVE, 1000);
  }
  int16_t res_status_effect() const {
    return GetField<int16_t>(VT_RES_STATUS_EFFECT, 0);
  }
  int16_t res_crit_dmg() const {
    return GetField<int16_t>(VT_RES_CRIT_DMG, 0);
  }
  int16_t res_fire_dmg() const {
    return GetField<int16_t>(VT_RES_FIRE_DMG, 0);
  }
  int16_t res_cold_dmg() const {
    return GetField<int16_t>(VT_RES_COLD_DMG, 0);
  }
  int16_t res_energy_dmg() const {
    return GetField<int16_t>(VT_RES_ENERGY_DMG, 0);
  }
  int16_t res_explosive_dmg() const {
    return GetField<int16_t>(VT_RES_EXPLOSIVE_DMG, 0);
  }
  int16_t evasion() const {
    return GetField<int16_t>(VT_EVASION, 0);
  }
  int16_t initiative() const {
    return GetField<int16_t>(VT_INITIATIVE, 0);
  }
  int16_t strike() const {
    return GetField<int16_t>(VT_STRIKE, 60);
  }
  int8_t level() const {
    return GetField<int8_t>(VT_LEVEL, 1);
  }
  int8_t armor() const {
    return GetField<int8_t>(VT_ARMOR, 0);
  }
  int8_t armor_penetration() const {
    return GetField<int8_t>(VT_ARMOR_PENETRATION, 0);
  }
  int8_t ap_max() const {
    return GetField<int8_t>(VT_AP_MAX, 6);
  }
  int8_t ap_current() const {
    return GetField<int8_t>(VT_AP_CURRENT, 6);
  }
  int8_t mov_downed_time() const {
    return GetField<int8_t>(VT_MOV_DOWNED_TIME, 3);
  }
  int8_t perception() const {
    return GetField<int8_t>(VT_PERCEPTION, 0);
  }
  int8_t radiation_resistance() const {
    return GetField<int8_t>(VT_RADIATION_RESISTANCE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyTable(attributes()) &&
           VerifyOffset(verifier, VT_SKILLS) &&
           verifier.VerifyTable(skills()) &&
           VerifyField<int16_t>(verifier, VT_CHARACTER_MODEL) &&
           VerifyField<int8_t>(verifier, VT_CHARACTER_TYPE) &&
           VerifyOffset(verifier, VT_WEAPON_TYPES) &&
           verifier.VerifyVector(weapon_types()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_DESCRIP) &&
           verifier.VerifyTable(descrip()) &&
           VerifyOffset(verifier, VT_ENTERED_NAME) &&
           verifier.VerifyString(entered_name()) &&
           VerifyField<int32_t>(verifier, VT_TIME_DETECT) &&
           VerifyField<int32_t>(verifier, VT_XP) &&
           VerifyField<int32_t>(verifier, VT_XP_REWARD) &&
           VerifyField<int16_t>(verifier, VT_RANGE_LEADER) &&
           VerifyField<int16_t>(verifier, VT_CON_MAX) &&
           VerifyField<int16_t>(verifier, VT_CON_CURRENT) &&
           VerifyField<int16_t>(verifier, VT_CON_PER_LEVEL) &&
           VerifyField<int16_t>(verifier, VT_MUL_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_MUL_COMBAT_SPEED) &&
           VerifyField<int16_t>(verifier, VT_MUL_THROWING_RANGE) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_AR) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_SMG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_HMG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_FT) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_BRAWL) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_BLUNT) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_BLADED) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_SAPISTOL) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_REVOLVER) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_PUMPSG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_AUTOSG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_SR) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_HIT_NEARBY_ALLIES) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_CRIT_DMG_MULTI_KILL) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_CRIT_HEAL) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_ACTION) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_MEGA_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_EVADE) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_CRIT_RES) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_DOUBLE_HEAL) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_DOUBLE_MONEY) &&
           VerifyField<int16_t>(verifier, VT_CHANCE_LUCK_DOUBLE_SCRAP) &&
           VerifyField<int16_t>(verifier, VT_BONUS_HEAL) &&
           VerifyField<int16_t>(verifier, VT_BONUS_CRIT_HEAL) &&
           VerifyField<int16_t>(verifier, VT_BONUS_HEAL_REVIVE) &&
           VerifyField<int16_t>(verifier, VT_BONUS_REPAIR) &&
           VerifyField<int16_t>(verifier, VT_BONUS_XP) &&
           VerifyField<int16_t>(verifier, VT_BONUS_MISSION_REWARD) &&
           VerifyField<int16_t>(verifier, VT_BONUS_SCRAP) &&
           VerifyField<int16_t>(verifier, VT_BONUS_SELL_VALUE) &&
           VerifyField<int16_t>(verifier, VT_BONUS_BUY_COST) &&
           VerifyField<int16_t>(verifier, VT_BONUS_SNEAK_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_NORM_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_MELEE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_RANGE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_FIRE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_COLD_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_ENERGY_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_EXPLOSIVE_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_ANIMAL_COMPANION_DMG) &&
           VerifyField<int16_t>(verifier, VT_BONUS_DMG_VS_ROBOT) &&
           VerifyField<int16_t>(verifier, VT_BONUS_DMG_VS_VEHICLE) &&
           VerifyField<int16_t>(verifier, VT_BONUS_DMG_VS_SYNTH) &&
           VerifyField<int16_t>(verifier, VT_BONUS_DMG_VS_ANIMAL) &&
           VerifyField<int16_t>(verifier, VT_BONUS_DMG_VS_MUTANT) &&
           VerifyField<int16_t>(verifier, VT_BONUS_NORM_DMG_ON_BOSS_KILL) &&
           VerifyField<int16_t>(verifier, VT_BONUS_CON_HEALED_ON_REVIVE) &&
           VerifyField<int16_t>(verifier, VT_RES_STATUS_EFFECT) &&
           VerifyField<int16_t>(verifier, VT_RES_CRIT_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_FIRE_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_COLD_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_ENERGY_DMG) &&
           VerifyField<int16_t>(verifier, VT_RES_EXPLOSIVE_DMG) &&
           VerifyField<int16_t>(verifier, VT_EVASION) &&
           VerifyField<int16_t>(verifier, VT_INITIATIVE) &&
           VerifyField<int16_t>(verifier, VT_STRIKE) &&
           VerifyField<int8_t>(verifier, VT_LEVEL) &&
           VerifyField<int8_t>(verifier, VT_ARMOR) &&
           VerifyField<int8_t>(verifier, VT_ARMOR_PENETRATION) &&
           VerifyField<int8_t>(verifier, VT_AP_MAX) &&
           VerifyField<int8_t>(verifier, VT_AP_CURRENT) &&
           VerifyField<int8_t>(verifier, VT_MOV_DOWNED_TIME) &&
           VerifyField<int8_t>(verifier, VT_PERCEPTION) &&
           VerifyField<int8_t>(verifier, VT_RADIATION_RESISTANCE) &&
           verifier.EndTable();
  }
};

struct FB_CharacterReferenceBuilder {
  typedef FB_CharacterReference Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_attributes(flatbuffers::Offset<fbAttribute::FB_Attribute> attributes) {
    fbb_.AddOffset(FB_CharacterReference::VT_ATTRIBUTES, attributes);
  }
  void add_skills(flatbuffers::Offset<fbSkill::FB_Skill> skills) {
    fbb_.AddOffset(FB_CharacterReference::VT_SKILLS, skills);
  }
  void add_character_model(fbCharacter::FB_CharacterModel character_model) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHARACTER_MODEL, static_cast<int16_t>(character_model), 0);
  }
  void add_character_type(fbCharacter::FB_CharacterType character_type) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_CHARACTER_TYPE, static_cast<int8_t>(character_type), 0);
  }
  void add_weapon_types(flatbuffers::Offset<flatbuffers::Vector<int8_t>> weapon_types) {
    fbb_.AddOffset(FB_CharacterReference::VT_WEAPON_TYPES, weapon_types);
  }
  void add_name(flatbuffers::Offset<fbCommon::FB_LanguageBundle> name) {
    fbb_.AddOffset(FB_CharacterReference::VT_NAME, name);
  }
  void add_descrip(flatbuffers::Offset<fbCommon::FB_LanguageBundle> descrip) {
    fbb_.AddOffset(FB_CharacterReference::VT_DESCRIP, descrip);
  }
  void add_entered_name(flatbuffers::Offset<flatbuffers::String> entered_name) {
    fbb_.AddOffset(FB_CharacterReference::VT_ENTERED_NAME, entered_name);
  }
  void add_time_detect(int32_t time_detect) {
    fbb_.AddElement<int32_t>(FB_CharacterReference::VT_TIME_DETECT, time_detect, 1700);
  }
  void add_xp(int32_t xp) {
    fbb_.AddElement<int32_t>(FB_CharacterReference::VT_XP, xp, 0);
  }
  void add_xp_reward(int32_t xp_reward) {
    fbb_.AddElement<int32_t>(FB_CharacterReference::VT_XP_REWARD, xp_reward, 0);
  }
  void add_range_leader(int16_t range_leader) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RANGE_LEADER, range_leader, 0);
  }
  void add_con_max(int16_t con_max) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CON_MAX, con_max, 50);
  }
  void add_con_current(int16_t con_current) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CON_CURRENT, con_current, 50);
  }
  void add_con_per_level(int16_t con_per_level) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CON_PER_LEVEL, con_per_level, 0);
  }
  void add_mul_crit_dmg(int16_t mul_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_MUL_CRIT_DMG, mul_crit_dmg, 100);
  }
  void add_mul_combat_speed(int16_t mul_combat_speed) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_MUL_COMBAT_SPEED, mul_combat_speed, 140);
  }
  void add_mul_throwing_range(int16_t mul_throwing_range) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_MUL_THROWING_RANGE, mul_throwing_range, 100);
  }
  void add_chance_hit(int16_t chance_hit) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT, chance_hit, 0);
  }
  void add_chance_hit_ar(int16_t chance_hit_ar) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_AR, chance_hit_ar, 0);
  }
  void add_chance_hit_smg(int16_t chance_hit_smg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_SMG, chance_hit_smg, 0);
  }
  void add_chance_hit_hmg(int16_t chance_hit_hmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_HMG, chance_hit_hmg, 0);
  }
  void add_chance_hit_ft(int16_t chance_hit_ft) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_FT, chance_hit_ft, 0);
  }
  void add_chance_hit_brawl(int16_t chance_hit_brawl) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_BRAWL, chance_hit_brawl, 0);
  }
  void add_chance_hit_blunt(int16_t chance_hit_blunt) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_BLUNT, chance_hit_blunt, 0);
  }
  void add_chance_hit_bladed(int16_t chance_hit_bladed) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_BLADED, chance_hit_bladed, 0);
  }
  void add_chance_hit_sapistol(int16_t chance_hit_sapistol) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_SAPISTOL, chance_hit_sapistol, 0);
  }
  void add_chance_hit_revolver(int16_t chance_hit_revolver) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_REVOLVER, chance_hit_revolver, 0);
  }
  void add_chance_hit_pumpsg(int16_t chance_hit_pumpsg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_PUMPSG, chance_hit_pumpsg, 0);
  }
  void add_chance_hit_autosg(int16_t chance_hit_autosg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_AUTOSG, chance_hit_autosg, 0);
  }
  void add_chance_hit_sr(int16_t chance_hit_sr) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_SR, chance_hit_sr, 0);
  }
  void add_chance_hit_nearby_allies(int16_t chance_hit_nearby_allies) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_HIT_NEARBY_ALLIES, chance_hit_nearby_allies, 0);
  }
  void add_chance_crit_dmg_multi_kill(int16_t chance_crit_dmg_multi_kill) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_CRIT_DMG_MULTI_KILL, chance_crit_dmg_multi_kill, 0);
  }
  void add_chance_crit_dmg(int16_t chance_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_CRIT_DMG, chance_crit_dmg, 0);
  }
  void add_chance_crit_heal(int16_t chance_crit_heal) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_CRIT_HEAL, chance_crit_heal, 0);
  }
  void add_chance_luck_action(int16_t chance_luck_action) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_ACTION, chance_luck_action, 0);
  }
  void add_chance_luck_crit_dmg(int16_t chance_luck_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_CRIT_DMG, chance_luck_crit_dmg, 0);
  }
  void add_chance_luck_mega_crit_dmg(int16_t chance_luck_mega_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_MEGA_CRIT_DMG, chance_luck_mega_crit_dmg, 0);
  }
  void add_chance_luck_evade(int16_t chance_luck_evade) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_EVADE, chance_luck_evade, 0);
  }
  void add_chance_luck_crit_res(int16_t chance_luck_crit_res) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_CRIT_RES, chance_luck_crit_res, 0);
  }
  void add_chance_luck_double_heal(int16_t chance_luck_double_heal) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_DOUBLE_HEAL, chance_luck_double_heal, 0);
  }
  void add_chance_luck_double_money(int16_t chance_luck_double_money) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_DOUBLE_MONEY, chance_luck_double_money, 0);
  }
  void add_chance_luck_double_scrap(int16_t chance_luck_double_scrap) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_CHANCE_LUCK_DOUBLE_SCRAP, chance_luck_double_scrap, 0);
  }
  void add_bonus_heal(int16_t bonus_heal) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_HEAL, bonus_heal, 1000);
  }
  void add_bonus_crit_heal(int16_t bonus_crit_heal) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_CRIT_HEAL, bonus_crit_heal, 1000);
  }
  void add_bonus_heal_revive(int16_t bonus_heal_revive) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_HEAL_REVIVE, bonus_heal_revive, 1000);
  }
  void add_bonus_repair(int16_t bonus_repair) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_REPAIR, bonus_repair, 1000);
  }
  void add_bonus_xp(int16_t bonus_xp) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_XP, bonus_xp, 1000);
  }
  void add_bonus_mission_reward(int16_t bonus_mission_reward) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_MISSION_REWARD, bonus_mission_reward, 1000);
  }
  void add_bonus_scrap(int16_t bonus_scrap) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_SCRAP, bonus_scrap, 1000);
  }
  void add_bonus_sell_value(int16_t bonus_sell_value) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_SELL_VALUE, bonus_sell_value, 1000);
  }
  void add_bonus_buy_cost(int16_t bonus_buy_cost) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_BUY_COST, bonus_buy_cost, 1000);
  }
  void add_bonus_sneak_dmg(int16_t bonus_sneak_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_SNEAK_DMG, bonus_sneak_dmg, 1000);
  }
  void add_bonus_norm_dmg(int16_t bonus_norm_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_NORM_DMG, bonus_norm_dmg, 1000);
  }
  void add_bonus_melee_dmg(int16_t bonus_melee_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_MELEE_DMG, bonus_melee_dmg, 1000);
  }
  void add_bonus_range_dmg(int16_t bonus_range_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_RANGE_DMG, bonus_range_dmg, 1000);
  }
  void add_bonus_fire_dmg(int16_t bonus_fire_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_FIRE_DMG, bonus_fire_dmg, 1000);
  }
  void add_bonus_cold_dmg(int16_t bonus_cold_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_COLD_DMG, bonus_cold_dmg, 1000);
  }
  void add_bonus_energy_dmg(int16_t bonus_energy_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_ENERGY_DMG, bonus_energy_dmg, 1000);
  }
  void add_bonus_explosive_dmg(int16_t bonus_explosive_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_EXPLOSIVE_DMG, bonus_explosive_dmg, 1000);
  }
  void add_bonus_animal_companion_dmg(int16_t bonus_animal_companion_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_ANIMAL_COMPANION_DMG, bonus_animal_companion_dmg, 1000);
  }
  void add_bonus_dmg_vs_robot(int16_t bonus_dmg_vs_robot) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_DMG_VS_ROBOT, bonus_dmg_vs_robot, 1000);
  }
  void add_bonus_dmg_vs_vehicle(int16_t bonus_dmg_vs_vehicle) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_DMG_VS_VEHICLE, bonus_dmg_vs_vehicle, 1000);
  }
  void add_bonus_dmg_vs_synth(int16_t bonus_dmg_vs_synth) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_DMG_VS_SYNTH, bonus_dmg_vs_synth, 1000);
  }
  void add_bonus_dmg_vs_animal(int16_t bonus_dmg_vs_animal) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_DMG_VS_ANIMAL, bonus_dmg_vs_animal, 1000);
  }
  void add_bonus_dmg_vs_mutant(int16_t bonus_dmg_vs_mutant) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_DMG_VS_MUTANT, bonus_dmg_vs_mutant, 1000);
  }
  void add_bonus_norm_dmg_on_boss_kill(int16_t bonus_norm_dmg_on_boss_kill) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_NORM_DMG_ON_BOSS_KILL, bonus_norm_dmg_on_boss_kill, 1000);
  }
  void add_bonus_con_healed_on_revive(int16_t bonus_con_healed_on_revive) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_BONUS_CON_HEALED_ON_REVIVE, bonus_con_healed_on_revive, 1000);
  }
  void add_res_status_effect(int16_t res_status_effect) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_STATUS_EFFECT, res_status_effect, 0);
  }
  void add_res_crit_dmg(int16_t res_crit_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_CRIT_DMG, res_crit_dmg, 0);
  }
  void add_res_fire_dmg(int16_t res_fire_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_FIRE_DMG, res_fire_dmg, 0);
  }
  void add_res_cold_dmg(int16_t res_cold_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_COLD_DMG, res_cold_dmg, 0);
  }
  void add_res_energy_dmg(int16_t res_energy_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_ENERGY_DMG, res_energy_dmg, 0);
  }
  void add_res_explosive_dmg(int16_t res_explosive_dmg) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_RES_EXPLOSIVE_DMG, res_explosive_dmg, 0);
  }
  void add_evasion(int16_t evasion) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_EVASION, evasion, 0);
  }
  void add_initiative(int16_t initiative) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_INITIATIVE, initiative, 0);
  }
  void add_strike(int16_t strike) {
    fbb_.AddElement<int16_t>(FB_CharacterReference::VT_STRIKE, strike, 60);
  }
  void add_level(int8_t level) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_LEVEL, level, 1);
  }
  void add_armor(int8_t armor) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_ARMOR, armor, 0);
  }
  void add_armor_penetration(int8_t armor_penetration) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_ARMOR_PENETRATION, armor_penetration, 0);
  }
  void add_ap_max(int8_t ap_max) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_AP_MAX, ap_max, 6);
  }
  void add_ap_current(int8_t ap_current) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_AP_CURRENT, ap_current, 6);
  }
  void add_mov_downed_time(int8_t mov_downed_time) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_MOV_DOWNED_TIME, mov_downed_time, 3);
  }
  void add_perception(int8_t perception) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_PERCEPTION, perception, 0);
  }
  void add_radiation_resistance(int8_t radiation_resistance) {
    fbb_.AddElement<int8_t>(FB_CharacterReference::VT_RADIATION_RESISTANCE, radiation_resistance, 0);
  }
  explicit FB_CharacterReferenceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterReference> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterReference>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterReference> CreateFB_CharacterReference(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttribute::FB_Attribute> attributes = 0,
    flatbuffers::Offset<fbSkill::FB_Skill> skills = 0,
    fbCharacter::FB_CharacterModel character_model = fbCharacter::FB_CharacterModel_INVALID,
    fbCharacter::FB_CharacterType character_type = fbCharacter::FB_CharacterType_INVALID,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> weapon_types = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> name = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> descrip = 0,
    flatbuffers::Offset<flatbuffers::String> entered_name = 0,
    int32_t time_detect = 1700,
    int32_t xp = 0,
    int32_t xp_reward = 0,
    int16_t range_leader = 0,
    int16_t con_max = 50,
    int16_t con_current = 50,
    int16_t con_per_level = 0,
    int16_t mul_crit_dmg = 100,
    int16_t mul_combat_speed = 140,
    int16_t mul_throwing_range = 100,
    int16_t chance_hit = 0,
    int16_t chance_hit_ar = 0,
    int16_t chance_hit_smg = 0,
    int16_t chance_hit_hmg = 0,
    int16_t chance_hit_ft = 0,
    int16_t chance_hit_brawl = 0,
    int16_t chance_hit_blunt = 0,
    int16_t chance_hit_bladed = 0,
    int16_t chance_hit_sapistol = 0,
    int16_t chance_hit_revolver = 0,
    int16_t chance_hit_pumpsg = 0,
    int16_t chance_hit_autosg = 0,
    int16_t chance_hit_sr = 0,
    int16_t chance_hit_nearby_allies = 0,
    int16_t chance_crit_dmg_multi_kill = 0,
    int16_t chance_crit_dmg = 0,
    int16_t chance_crit_heal = 0,
    int16_t chance_luck_action = 0,
    int16_t chance_luck_crit_dmg = 0,
    int16_t chance_luck_mega_crit_dmg = 0,
    int16_t chance_luck_evade = 0,
    int16_t chance_luck_crit_res = 0,
    int16_t chance_luck_double_heal = 0,
    int16_t chance_luck_double_money = 0,
    int16_t chance_luck_double_scrap = 0,
    int16_t bonus_heal = 1000,
    int16_t bonus_crit_heal = 1000,
    int16_t bonus_heal_revive = 1000,
    int16_t bonus_repair = 1000,
    int16_t bonus_xp = 1000,
    int16_t bonus_mission_reward = 1000,
    int16_t bonus_scrap = 1000,
    int16_t bonus_sell_value = 1000,
    int16_t bonus_buy_cost = 1000,
    int16_t bonus_sneak_dmg = 1000,
    int16_t bonus_norm_dmg = 1000,
    int16_t bonus_melee_dmg = 1000,
    int16_t bonus_range_dmg = 1000,
    int16_t bonus_fire_dmg = 1000,
    int16_t bonus_cold_dmg = 1000,
    int16_t bonus_energy_dmg = 1000,
    int16_t bonus_explosive_dmg = 1000,
    int16_t bonus_animal_companion_dmg = 1000,
    int16_t bonus_dmg_vs_robot = 1000,
    int16_t bonus_dmg_vs_vehicle = 1000,
    int16_t bonus_dmg_vs_synth = 1000,
    int16_t bonus_dmg_vs_animal = 1000,
    int16_t bonus_dmg_vs_mutant = 1000,
    int16_t bonus_norm_dmg_on_boss_kill = 1000,
    int16_t bonus_con_healed_on_revive = 1000,
    int16_t res_status_effect = 0,
    int16_t res_crit_dmg = 0,
    int16_t res_fire_dmg = 0,
    int16_t res_cold_dmg = 0,
    int16_t res_energy_dmg = 0,
    int16_t res_explosive_dmg = 0,
    int16_t evasion = 0,
    int16_t initiative = 0,
    int16_t strike = 60,
    int8_t level = 1,
    int8_t armor = 0,
    int8_t armor_penetration = 0,
    int8_t ap_max = 6,
    int8_t ap_current = 6,
    int8_t mov_downed_time = 3,
    int8_t perception = 0,
    int8_t radiation_resistance = 0) {
  FB_CharacterReferenceBuilder builder_(_fbb);
  builder_.add_xp_reward(xp_reward);
  builder_.add_xp(xp);
  builder_.add_time_detect(time_detect);
  builder_.add_entered_name(entered_name);
  builder_.add_descrip(descrip);
  builder_.add_name(name);
  builder_.add_weapon_types(weapon_types);
  builder_.add_skills(skills);
  builder_.add_attributes(attributes);
  builder_.add_strike(strike);
  builder_.add_initiative(initiative);
  builder_.add_evasion(evasion);
  builder_.add_res_explosive_dmg(res_explosive_dmg);
  builder_.add_res_energy_dmg(res_energy_dmg);
  builder_.add_res_cold_dmg(res_cold_dmg);
  builder_.add_res_fire_dmg(res_fire_dmg);
  builder_.add_res_crit_dmg(res_crit_dmg);
  builder_.add_res_status_effect(res_status_effect);
  builder_.add_bonus_con_healed_on_revive(bonus_con_healed_on_revive);
  builder_.add_bonus_norm_dmg_on_boss_kill(bonus_norm_dmg_on_boss_kill);
  builder_.add_bonus_dmg_vs_mutant(bonus_dmg_vs_mutant);
  builder_.add_bonus_dmg_vs_animal(bonus_dmg_vs_animal);
  builder_.add_bonus_dmg_vs_synth(bonus_dmg_vs_synth);
  builder_.add_bonus_dmg_vs_vehicle(bonus_dmg_vs_vehicle);
  builder_.add_bonus_dmg_vs_robot(bonus_dmg_vs_robot);
  builder_.add_bonus_animal_companion_dmg(bonus_animal_companion_dmg);
  builder_.add_bonus_explosive_dmg(bonus_explosive_dmg);
  builder_.add_bonus_energy_dmg(bonus_energy_dmg);
  builder_.add_bonus_cold_dmg(bonus_cold_dmg);
  builder_.add_bonus_fire_dmg(bonus_fire_dmg);
  builder_.add_bonus_range_dmg(bonus_range_dmg);
  builder_.add_bonus_melee_dmg(bonus_melee_dmg);
  builder_.add_bonus_norm_dmg(bonus_norm_dmg);
  builder_.add_bonus_sneak_dmg(bonus_sneak_dmg);
  builder_.add_bonus_buy_cost(bonus_buy_cost);
  builder_.add_bonus_sell_value(bonus_sell_value);
  builder_.add_bonus_scrap(bonus_scrap);
  builder_.add_bonus_mission_reward(bonus_mission_reward);
  builder_.add_bonus_xp(bonus_xp);
  builder_.add_bonus_repair(bonus_repair);
  builder_.add_bonus_heal_revive(bonus_heal_revive);
  builder_.add_bonus_crit_heal(bonus_crit_heal);
  builder_.add_bonus_heal(bonus_heal);
  builder_.add_chance_luck_double_scrap(chance_luck_double_scrap);
  builder_.add_chance_luck_double_money(chance_luck_double_money);
  builder_.add_chance_luck_double_heal(chance_luck_double_heal);
  builder_.add_chance_luck_crit_res(chance_luck_crit_res);
  builder_.add_chance_luck_evade(chance_luck_evade);
  builder_.add_chance_luck_mega_crit_dmg(chance_luck_mega_crit_dmg);
  builder_.add_chance_luck_crit_dmg(chance_luck_crit_dmg);
  builder_.add_chance_luck_action(chance_luck_action);
  builder_.add_chance_crit_heal(chance_crit_heal);
  builder_.add_chance_crit_dmg(chance_crit_dmg);
  builder_.add_chance_crit_dmg_multi_kill(chance_crit_dmg_multi_kill);
  builder_.add_chance_hit_nearby_allies(chance_hit_nearby_allies);
  builder_.add_chance_hit_sr(chance_hit_sr);
  builder_.add_chance_hit_autosg(chance_hit_autosg);
  builder_.add_chance_hit_pumpsg(chance_hit_pumpsg);
  builder_.add_chance_hit_revolver(chance_hit_revolver);
  builder_.add_chance_hit_sapistol(chance_hit_sapistol);
  builder_.add_chance_hit_bladed(chance_hit_bladed);
  builder_.add_chance_hit_blunt(chance_hit_blunt);
  builder_.add_chance_hit_brawl(chance_hit_brawl);
  builder_.add_chance_hit_ft(chance_hit_ft);
  builder_.add_chance_hit_hmg(chance_hit_hmg);
  builder_.add_chance_hit_smg(chance_hit_smg);
  builder_.add_chance_hit_ar(chance_hit_ar);
  builder_.add_chance_hit(chance_hit);
  builder_.add_mul_throwing_range(mul_throwing_range);
  builder_.add_mul_combat_speed(mul_combat_speed);
  builder_.add_mul_crit_dmg(mul_crit_dmg);
  builder_.add_con_per_level(con_per_level);
  builder_.add_con_current(con_current);
  builder_.add_con_max(con_max);
  builder_.add_range_leader(range_leader);
  builder_.add_character_model(character_model);
  builder_.add_radiation_resistance(radiation_resistance);
  builder_.add_perception(perception);
  builder_.add_mov_downed_time(mov_downed_time);
  builder_.add_ap_current(ap_current);
  builder_.add_ap_max(ap_max);
  builder_.add_armor_penetration(armor_penetration);
  builder_.add_armor(armor);
  builder_.add_level(level);
  builder_.add_character_type(character_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_CharacterReference> CreateFB_CharacterReferenceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttribute::FB_Attribute> attributes = 0,
    flatbuffers::Offset<fbSkill::FB_Skill> skills = 0,
    fbCharacter::FB_CharacterModel character_model = fbCharacter::FB_CharacterModel_INVALID,
    fbCharacter::FB_CharacterType character_type = fbCharacter::FB_CharacterType_INVALID,
    const std::vector<int8_t> *weapon_types = nullptr,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> name = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> descrip = 0,
    const char *entered_name = nullptr,
    int32_t time_detect = 1700,
    int32_t xp = 0,
    int32_t xp_reward = 0,
    int16_t range_leader = 0,
    int16_t con_max = 50,
    int16_t con_current = 50,
    int16_t con_per_level = 0,
    int16_t mul_crit_dmg = 100,
    int16_t mul_combat_speed = 140,
    int16_t mul_throwing_range = 100,
    int16_t chance_hit = 0,
    int16_t chance_hit_ar = 0,
    int16_t chance_hit_smg = 0,
    int16_t chance_hit_hmg = 0,
    int16_t chance_hit_ft = 0,
    int16_t chance_hit_brawl = 0,
    int16_t chance_hit_blunt = 0,
    int16_t chance_hit_bladed = 0,
    int16_t chance_hit_sapistol = 0,
    int16_t chance_hit_revolver = 0,
    int16_t chance_hit_pumpsg = 0,
    int16_t chance_hit_autosg = 0,
    int16_t chance_hit_sr = 0,
    int16_t chance_hit_nearby_allies = 0,
    int16_t chance_crit_dmg_multi_kill = 0,
    int16_t chance_crit_dmg = 0,
    int16_t chance_crit_heal = 0,
    int16_t chance_luck_action = 0,
    int16_t chance_luck_crit_dmg = 0,
    int16_t chance_luck_mega_crit_dmg = 0,
    int16_t chance_luck_evade = 0,
    int16_t chance_luck_crit_res = 0,
    int16_t chance_luck_double_heal = 0,
    int16_t chance_luck_double_money = 0,
    int16_t chance_luck_double_scrap = 0,
    int16_t bonus_heal = 1000,
    int16_t bonus_crit_heal = 1000,
    int16_t bonus_heal_revive = 1000,
    int16_t bonus_repair = 1000,
    int16_t bonus_xp = 1000,
    int16_t bonus_mission_reward = 1000,
    int16_t bonus_scrap = 1000,
    int16_t bonus_sell_value = 1000,
    int16_t bonus_buy_cost = 1000,
    int16_t bonus_sneak_dmg = 1000,
    int16_t bonus_norm_dmg = 1000,
    int16_t bonus_melee_dmg = 1000,
    int16_t bonus_range_dmg = 1000,
    int16_t bonus_fire_dmg = 1000,
    int16_t bonus_cold_dmg = 1000,
    int16_t bonus_energy_dmg = 1000,
    int16_t bonus_explosive_dmg = 1000,
    int16_t bonus_animal_companion_dmg = 1000,
    int16_t bonus_dmg_vs_robot = 1000,
    int16_t bonus_dmg_vs_vehicle = 1000,
    int16_t bonus_dmg_vs_synth = 1000,
    int16_t bonus_dmg_vs_animal = 1000,
    int16_t bonus_dmg_vs_mutant = 1000,
    int16_t bonus_norm_dmg_on_boss_kill = 1000,
    int16_t bonus_con_healed_on_revive = 1000,
    int16_t res_status_effect = 0,
    int16_t res_crit_dmg = 0,
    int16_t res_fire_dmg = 0,
    int16_t res_cold_dmg = 0,
    int16_t res_energy_dmg = 0,
    int16_t res_explosive_dmg = 0,
    int16_t evasion = 0,
    int16_t initiative = 0,
    int16_t strike = 60,
    int8_t level = 1,
    int8_t armor = 0,
    int8_t armor_penetration = 0,
    int8_t ap_max = 6,
    int8_t ap_current = 6,
    int8_t mov_downed_time = 3,
    int8_t perception = 0,
    int8_t radiation_resistance = 0) {
  auto weapon_types__ = weapon_types ? _fbb.CreateVector<int8_t>(*weapon_types) : 0;
  auto entered_name__ = entered_name ? _fbb.CreateString(entered_name) : 0;
  return fbCharacter::CreateFB_CharacterReference(
      _fbb,
      attributes,
      skills,
      character_model,
      character_type,
      weapon_types__,
      name,
      descrip,
      entered_name__,
      time_detect,
      xp,
      xp_reward,
      range_leader,
      con_max,
      con_current,
      con_per_level,
      mul_crit_dmg,
      mul_combat_speed,
      mul_throwing_range,
      chance_hit,
      chance_hit_ar,
      chance_hit_smg,
      chance_hit_hmg,
      chance_hit_ft,
      chance_hit_brawl,
      chance_hit_blunt,
      chance_hit_bladed,
      chance_hit_sapistol,
      chance_hit_revolver,
      chance_hit_pumpsg,
      chance_hit_autosg,
      chance_hit_sr,
      chance_hit_nearby_allies,
      chance_crit_dmg_multi_kill,
      chance_crit_dmg,
      chance_crit_heal,
      chance_luck_action,
      chance_luck_crit_dmg,
      chance_luck_mega_crit_dmg,
      chance_luck_evade,
      chance_luck_crit_res,
      chance_luck_double_heal,
      chance_luck_double_money,
      chance_luck_double_scrap,
      bonus_heal,
      bonus_crit_heal,
      bonus_heal_revive,
      bonus_repair,
      bonus_xp,
      bonus_mission_reward,
      bonus_scrap,
      bonus_sell_value,
      bonus_buy_cost,
      bonus_sneak_dmg,
      bonus_norm_dmg,
      bonus_melee_dmg,
      bonus_range_dmg,
      bonus_fire_dmg,
      bonus_cold_dmg,
      bonus_energy_dmg,
      bonus_explosive_dmg,
      bonus_animal_companion_dmg,
      bonus_dmg_vs_robot,
      bonus_dmg_vs_vehicle,
      bonus_dmg_vs_synth,
      bonus_dmg_vs_animal,
      bonus_dmg_vs_mutant,
      bonus_norm_dmg_on_boss_kill,
      bonus_con_healed_on_revive,
      res_status_effect,
      res_crit_dmg,
      res_fire_dmg,
      res_cold_dmg,
      res_energy_dmg,
      res_explosive_dmg,
      evasion,
      initiative,
      strike,
      level,
      armor,
      armor_penetration,
      ap_max,
      ap_current,
      mov_downed_time,
      perception,
      radiation_resistance);
}

struct FB_CharacterReferenceContainer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_CharacterReferenceContainerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SAMPLE_OF_ALL_FIELDS = 4,
    VT_REF_MINIMAL_VALUES = 6,
    VT_REF_DEFAULT_VALUES = 8,
    VT_REF_VALUES = 10
  };
  const fbCharacter::FB_CharacterReference *sample_of_all_fields() const {
    return GetPointer<const fbCharacter::FB_CharacterReference *>(VT_SAMPLE_OF_ALL_FIELDS);
  }
  const fbCharacter::FB_CharacterReference *ref_minimal_values() const {
    return GetPointer<const fbCharacter::FB_CharacterReference *>(VT_REF_MINIMAL_VALUES);
  }
  const fbCharacter::FB_CharacterReference *ref_default_values() const {
    return GetPointer<const fbCharacter::FB_CharacterReference *>(VT_REF_DEFAULT_VALUES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>> *ref_values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>> *>(VT_REF_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SAMPLE_OF_ALL_FIELDS) &&
           verifier.VerifyTable(sample_of_all_fields()) &&
           VerifyOffset(verifier, VT_REF_MINIMAL_VALUES) &&
           verifier.VerifyTable(ref_minimal_values()) &&
           VerifyOffset(verifier, VT_REF_DEFAULT_VALUES) &&
           verifier.VerifyTable(ref_default_values()) &&
           VerifyOffset(verifier, VT_REF_VALUES) &&
           verifier.VerifyVector(ref_values()) &&
           verifier.VerifyVectorOfTables(ref_values()) &&
           verifier.EndTable();
  }
};

struct FB_CharacterReferenceContainerBuilder {
  typedef FB_CharacterReferenceContainer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sample_of_all_fields(flatbuffers::Offset<fbCharacter::FB_CharacterReference> sample_of_all_fields) {
    fbb_.AddOffset(FB_CharacterReferenceContainer::VT_SAMPLE_OF_ALL_FIELDS, sample_of_all_fields);
  }
  void add_ref_minimal_values(flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_minimal_values) {
    fbb_.AddOffset(FB_CharacterReferenceContainer::VT_REF_MINIMAL_VALUES, ref_minimal_values);
  }
  void add_ref_default_values(flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_default_values) {
    fbb_.AddOffset(FB_CharacterReferenceContainer::VT_REF_DEFAULT_VALUES, ref_default_values);
  }
  void add_ref_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>>> ref_values) {
    fbb_.AddOffset(FB_CharacterReferenceContainer::VT_REF_VALUES, ref_values);
  }
  explicit FB_CharacterReferenceContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_CharacterReferenceContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_CharacterReferenceContainer>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_CharacterReferenceContainer> CreateFB_CharacterReferenceContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> sample_of_all_fields = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_minimal_values = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_default_values = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>>> ref_values = 0) {
  FB_CharacterReferenceContainerBuilder builder_(_fbb);
  builder_.add_ref_values(ref_values);
  builder_.add_ref_default_values(ref_default_values);
  builder_.add_ref_minimal_values(ref_minimal_values);
  builder_.add_sample_of_all_fields(sample_of_all_fields);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_CharacterReferenceContainer> CreateFB_CharacterReferenceContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> sample_of_all_fields = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_minimal_values = 0,
    flatbuffers::Offset<fbCharacter::FB_CharacterReference> ref_default_values = 0,
    const std::vector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>> *ref_values = nullptr) {
  auto ref_values__ = ref_values ? _fbb.CreateVector<flatbuffers::Offset<fbCharacter::FB_CharacterReference>>(*ref_values) : 0;
  return fbCharacter::CreateFB_CharacterReferenceContainer(
      _fbb,
      sample_of_all_fields,
      ref_minimal_values,
      ref_default_values,
      ref_values__);
}

inline const fbCharacter::FB_CharacterReferenceContainer *GetFB_CharacterReferenceContainer(const void *buf) {
  return flatbuffers::GetRoot<fbCharacter::FB_CharacterReferenceContainer>(buf);
}

inline const fbCharacter::FB_CharacterReferenceContainer *GetSizePrefixedFB_CharacterReferenceContainer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbCharacter::FB_CharacterReferenceContainer>(buf);
}

inline const char *FB_CharacterReferenceContainerIdentifier() {
  return "CHRR";
}

inline bool FB_CharacterReferenceContainerBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_CharacterReferenceContainerIdentifier());
}

inline bool VerifyFB_CharacterReferenceContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbCharacter::FB_CharacterReferenceContainer>(FB_CharacterReferenceContainerIdentifier());
}

inline bool VerifySizePrefixedFB_CharacterReferenceContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbCharacter::FB_CharacterReferenceContainer>(FB_CharacterReferenceContainerIdentifier());
}

inline const char *FB_CharacterReferenceContainerExtension() {
  return "bundle";
}

inline void FinishFB_CharacterReferenceContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterReferenceContainer> root) {
  fbb.Finish(root, FB_CharacterReferenceContainerIdentifier());
}

inline void FinishSizePrefixedFB_CharacterReferenceContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbCharacter::FB_CharacterReferenceContainer> root) {
  fbb.FinishSizePrefixed(root, FB_CharacterReferenceContainerIdentifier());
}

}  // namespace fbCharacter

#endif  // FLATBUFFERS_GENERATED_CHARACTERREFERENCEFB_FBCHARACTER_H_
