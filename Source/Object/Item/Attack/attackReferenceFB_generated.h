// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTACKREFERENCEFB_FBATTACK_H_
#define FLATBUFFERS_GENERATED_ATTACKREFERENCEFB_FBATTACK_H_

#include "flatbuffers/flatbuffers.h"

#include "attackFB_generated.h"

namespace fbAttack {

struct FB_AttackContainer;
struct FB_AttackContainerBuilder;

struct FB_AttackContainer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AttackContainerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SAMPLE_OF_ALL_FIELDS = 4,
    VT_DEFAULT_VALUES = 6,
    VT_MINIMAL_VALUES = 8,
    VT_RANGE_POINT_BLANK = 10
  };
  const fbAttack::FB_Attack *sample_of_all_fields() const {
    return GetPointer<const fbAttack::FB_Attack *>(VT_SAMPLE_OF_ALL_FIELDS);
  }
  const fbAttack::FB_Attack *default_values() const {
    return GetPointer<const fbAttack::FB_Attack *>(VT_DEFAULT_VALUES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbAttack::FB_Attack>> *minimal_values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbAttack::FB_Attack>> *>(VT_MINIMAL_VALUES);
  }
  int16_t range_point_blank() const {
    return GetField<int16_t>(VT_RANGE_POINT_BLANK, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SAMPLE_OF_ALL_FIELDS) &&
           verifier.VerifyTable(sample_of_all_fields()) &&
           VerifyOffset(verifier, VT_DEFAULT_VALUES) &&
           verifier.VerifyTable(default_values()) &&
           VerifyOffset(verifier, VT_MINIMAL_VALUES) &&
           verifier.VerifyVector(minimal_values()) &&
           verifier.VerifyVectorOfTables(minimal_values()) &&
           VerifyField<int16_t>(verifier, VT_RANGE_POINT_BLANK) &&
           verifier.EndTable();
  }
};

struct FB_AttackContainerBuilder {
  typedef FB_AttackContainer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sample_of_all_fields(flatbuffers::Offset<fbAttack::FB_Attack> sample_of_all_fields) {
    fbb_.AddOffset(FB_AttackContainer::VT_SAMPLE_OF_ALL_FIELDS, sample_of_all_fields);
  }
  void add_default_values(flatbuffers::Offset<fbAttack::FB_Attack> default_values) {
    fbb_.AddOffset(FB_AttackContainer::VT_DEFAULT_VALUES, default_values);
  }
  void add_minimal_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbAttack::FB_Attack>>> minimal_values) {
    fbb_.AddOffset(FB_AttackContainer::VT_MINIMAL_VALUES, minimal_values);
  }
  void add_range_point_blank(int16_t range_point_blank) {
    fbb_.AddElement<int16_t>(FB_AttackContainer::VT_RANGE_POINT_BLANK, range_point_blank, 0);
  }
  explicit FB_AttackContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AttackContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AttackContainer>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AttackContainer> CreateFB_AttackContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttack::FB_Attack> sample_of_all_fields = 0,
    flatbuffers::Offset<fbAttack::FB_Attack> default_values = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbAttack::FB_Attack>>> minimal_values = 0,
    int16_t range_point_blank = 0) {
  FB_AttackContainerBuilder builder_(_fbb);
  builder_.add_minimal_values(minimal_values);
  builder_.add_default_values(default_values);
  builder_.add_sample_of_all_fields(sample_of_all_fields);
  builder_.add_range_point_blank(range_point_blank);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_AttackContainer> CreateFB_AttackContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbAttack::FB_Attack> sample_of_all_fields = 0,
    flatbuffers::Offset<fbAttack::FB_Attack> default_values = 0,
    const std::vector<flatbuffers::Offset<fbAttack::FB_Attack>> *minimal_values = nullptr,
    int16_t range_point_blank = 0) {
  auto minimal_values__ = minimal_values ? _fbb.CreateVector<flatbuffers::Offset<fbAttack::FB_Attack>>(*minimal_values) : 0;
  return fbAttack::CreateFB_AttackContainer(
      _fbb,
      sample_of_all_fields,
      default_values,
      minimal_values__,
      range_point_blank);
}

inline const fbAttack::FB_AttackContainer *GetFB_AttackContainer(const void *buf) {
  return flatbuffers::GetRoot<fbAttack::FB_AttackContainer>(buf);
}

inline const fbAttack::FB_AttackContainer *GetSizePrefixedFB_AttackContainer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbAttack::FB_AttackContainer>(buf);
}

inline const char *FB_AttackContainerIdentifier() {
  return "ATKR";
}

inline bool FB_AttackContainerBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_AttackContainerIdentifier());
}

inline bool VerifyFB_AttackContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbAttack::FB_AttackContainer>(FB_AttackContainerIdentifier());
}

inline bool VerifySizePrefixedFB_AttackContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbAttack::FB_AttackContainer>(FB_AttackContainerIdentifier());
}

inline const char *FB_AttackContainerExtension() {
  return "bundle";
}

inline void FinishFB_AttackContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAttack::FB_AttackContainer> root) {
  fbb.Finish(root, FB_AttackContainerIdentifier());
}

inline void FinishSizePrefixedFB_AttackContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAttack::FB_AttackContainer> root) {
  fbb.FinishSizePrefixed(root, FB_AttackContainerIdentifier());
}

}  // namespace fbAttack

#endif  // FLATBUFFERS_GENERATED_ATTACKREFERENCEFB_FBATTACK_H_
