// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DAMAGETEXTFB_FBDAMAGE_H_
#define FLATBUFFERS_GENERATED_DAMAGETEXTFB_FBDAMAGE_H_

#include "flatbuffers/flatbuffers.h"

#include "languageBundleFB_generated.h"

namespace fbDamage {

struct FB_DamageTextCommon;
struct FB_DamageTextCommonBuilder;

struct FB_DamageText;
struct FB_DamageTextBuilder;

struct FB_DamageTextCommon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_DamageTextCommonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DAMAGE_VS_ROBOTS = 4,
    VT_DAMAGE_VS_VEHICLES = 6,
    VT_DAMAGE_VS_HUMANS = 8,
    VT_DAMAGE_VS_ANIMALS = 10,
    VT_DAMAGE_VS_MUTANTS = 12
  };
  const fbCommon::FB_LanguageBundle *damage_vs_robots() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DAMAGE_VS_ROBOTS);
  }
  const fbCommon::FB_LanguageBundle *damage_vs_vehicles() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DAMAGE_VS_VEHICLES);
  }
  const fbCommon::FB_LanguageBundle *damage_vs_humans() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DAMAGE_VS_HUMANS);
  }
  const fbCommon::FB_LanguageBundle *damage_vs_animals() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DAMAGE_VS_ANIMALS);
  }
  const fbCommon::FB_LanguageBundle *damage_vs_mutants() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DAMAGE_VS_MUTANTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DAMAGE_VS_ROBOTS) &&
           verifier.VerifyTable(damage_vs_robots()) &&
           VerifyOffset(verifier, VT_DAMAGE_VS_VEHICLES) &&
           verifier.VerifyTable(damage_vs_vehicles()) &&
           VerifyOffset(verifier, VT_DAMAGE_VS_HUMANS) &&
           verifier.VerifyTable(damage_vs_humans()) &&
           VerifyOffset(verifier, VT_DAMAGE_VS_ANIMALS) &&
           verifier.VerifyTable(damage_vs_animals()) &&
           VerifyOffset(verifier, VT_DAMAGE_VS_MUTANTS) &&
           verifier.VerifyTable(damage_vs_mutants()) &&
           verifier.EndTable();
  }
};

struct FB_DamageTextCommonBuilder {
  typedef FB_DamageTextCommon Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_damage_vs_robots(flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_robots) {
    fbb_.AddOffset(FB_DamageTextCommon::VT_DAMAGE_VS_ROBOTS, damage_vs_robots);
  }
  void add_damage_vs_vehicles(flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_vehicles) {
    fbb_.AddOffset(FB_DamageTextCommon::VT_DAMAGE_VS_VEHICLES, damage_vs_vehicles);
  }
  void add_damage_vs_humans(flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_humans) {
    fbb_.AddOffset(FB_DamageTextCommon::VT_DAMAGE_VS_HUMANS, damage_vs_humans);
  }
  void add_damage_vs_animals(flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_animals) {
    fbb_.AddOffset(FB_DamageTextCommon::VT_DAMAGE_VS_ANIMALS, damage_vs_animals);
  }
  void add_damage_vs_mutants(flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_mutants) {
    fbb_.AddOffset(FB_DamageTextCommon::VT_DAMAGE_VS_MUTANTS, damage_vs_mutants);
  }
  explicit FB_DamageTextCommonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_DamageTextCommon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_DamageTextCommon>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_DamageTextCommon> CreateFB_DamageTextCommon(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_robots = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_vehicles = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_humans = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_animals = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> damage_vs_mutants = 0) {
  FB_DamageTextCommonBuilder builder_(_fbb);
  builder_.add_damage_vs_mutants(damage_vs_mutants);
  builder_.add_damage_vs_animals(damage_vs_animals);
  builder_.add_damage_vs_humans(damage_vs_humans);
  builder_.add_damage_vs_vehicles(damage_vs_vehicles);
  builder_.add_damage_vs_robots(damage_vs_robots);
  return builder_.Finish();
}

struct FB_DamageText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_DamageTextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMON = 4
  };
  const fbDamage::FB_DamageTextCommon *common() const {
    return GetPointer<const fbDamage::FB_DamageTextCommon *>(VT_COMMON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMMON) &&
           verifier.VerifyTable(common()) &&
           verifier.EndTable();
  }
};

struct FB_DamageTextBuilder {
  typedef FB_DamageText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_common(flatbuffers::Offset<fbDamage::FB_DamageTextCommon> common) {
    fbb_.AddOffset(FB_DamageText::VT_COMMON, common);
  }
  explicit FB_DamageTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_DamageText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_DamageText>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_DamageText> CreateFB_DamageText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<fbDamage::FB_DamageTextCommon> common = 0) {
  FB_DamageTextBuilder builder_(_fbb);
  builder_.add_common(common);
  return builder_.Finish();
}

inline const fbDamage::FB_DamageText *GetFB_DamageText(const void *buf) {
  return flatbuffers::GetRoot<fbDamage::FB_DamageText>(buf);
}

inline const fbDamage::FB_DamageText *GetSizePrefixedFB_DamageText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbDamage::FB_DamageText>(buf);
}

inline const char *FB_DamageTextIdentifier() {
  return "DMGT";
}

inline bool FB_DamageTextBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_DamageTextIdentifier());
}

inline bool VerifyFB_DamageTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbDamage::FB_DamageText>(FB_DamageTextIdentifier());
}

inline bool VerifySizePrefixedFB_DamageTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbDamage::FB_DamageText>(FB_DamageTextIdentifier());
}

inline const char *FB_DamageTextExtension() {
  return "bundle";
}

inline void FinishFB_DamageTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbDamage::FB_DamageText> root) {
  fbb.Finish(root, FB_DamageTextIdentifier());
}

inline void FinishSizePrefixedFB_DamageTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbDamage::FB_DamageText> root) {
  fbb.FinishSizePrefixed(root, FB_DamageTextIdentifier());
}

}  // namespace fbDamage

#endif  // FLATBUFFERS_GENERATED_DAMAGETEXTFB_FBDAMAGE_H_
