// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMMOREFERENCEFB_FBAMMO_H_
#define FLATBUFFERS_GENERATED_AMMOREFERENCEFB_FBAMMO_H_

#include "flatbuffers/flatbuffers.h"

#include "languageBundleFB_generated.h"
#include "ammoTypeFB_generated.h"

namespace fbAmmo {

struct FB_AmmoReference;
struct FB_AmmoReferenceBuilder;

struct FB_AmmoReferenceContainer;
struct FB_AmmoReferenceContainerBuilder;

struct FB_AmmoReference FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AmmoReferenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AMMO_TYPE = 4,
    VT_NAME = 6,
    VT_DESCRIP = 8,
    VT_PRICE = 10
  };
  fbAmmo::FB_AmmoType ammo_type() const {
    return static_cast<fbAmmo::FB_AmmoType>(GetField<int8_t>(VT_AMMO_TYPE, 0));
  }
  const fbCommon::FB_LanguageBundle *name() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_NAME);
  }
  const fbCommon::FB_LanguageBundle *descrip() const {
    return GetPointer<const fbCommon::FB_LanguageBundle *>(VT_DESCRIP);
  }
  int16_t price() const {
    return GetField<int16_t>(VT_PRICE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_AMMO_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyTable(name()) &&
           VerifyOffset(verifier, VT_DESCRIP) &&
           verifier.VerifyTable(descrip()) &&
           VerifyField<int16_t>(verifier, VT_PRICE) &&
           verifier.EndTable();
  }
};

struct FB_AmmoReferenceBuilder {
  typedef FB_AmmoReference Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ammo_type(fbAmmo::FB_AmmoType ammo_type) {
    fbb_.AddElement<int8_t>(FB_AmmoReference::VT_AMMO_TYPE, static_cast<int8_t>(ammo_type), 0);
  }
  void add_name(flatbuffers::Offset<fbCommon::FB_LanguageBundle> name) {
    fbb_.AddOffset(FB_AmmoReference::VT_NAME, name);
  }
  void add_descrip(flatbuffers::Offset<fbCommon::FB_LanguageBundle> descrip) {
    fbb_.AddOffset(FB_AmmoReference::VT_DESCRIP, descrip);
  }
  void add_price(int16_t price) {
    fbb_.AddElement<int16_t>(FB_AmmoReference::VT_PRICE, price, 0);
  }
  explicit FB_AmmoReferenceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AmmoReference> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AmmoReference>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AmmoReference> CreateFB_AmmoReference(
    flatbuffers::FlatBufferBuilder &_fbb,
    fbAmmo::FB_AmmoType ammo_type = fbAmmo::FB_AmmoType_INVALID,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> name = 0,
    flatbuffers::Offset<fbCommon::FB_LanguageBundle> descrip = 0,
    int16_t price = 0) {
  FB_AmmoReferenceBuilder builder_(_fbb);
  builder_.add_descrip(descrip);
  builder_.add_name(name);
  builder_.add_price(price);
  builder_.add_ammo_type(ammo_type);
  return builder_.Finish();
}

struct FB_AmmoReferenceContainer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FB_AmmoReferenceContainerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>> *refs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>> *>(VT_REFS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REFS) &&
           verifier.VerifyVector(refs()) &&
           verifier.VerifyVectorOfTables(refs()) &&
           verifier.EndTable();
  }
};

struct FB_AmmoReferenceContainerBuilder {
  typedef FB_AmmoReferenceContainer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_refs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>>> refs) {
    fbb_.AddOffset(FB_AmmoReferenceContainer::VT_REFS, refs);
  }
  explicit FB_AmmoReferenceContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FB_AmmoReferenceContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FB_AmmoReferenceContainer>(end);
    return o;
  }
};

inline flatbuffers::Offset<FB_AmmoReferenceContainer> CreateFB_AmmoReferenceContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>>> refs = 0) {
  FB_AmmoReferenceContainerBuilder builder_(_fbb);
  builder_.add_refs(refs);
  return builder_.Finish();
}

inline flatbuffers::Offset<FB_AmmoReferenceContainer> CreateFB_AmmoReferenceContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>> *refs = nullptr) {
  auto refs__ = refs ? _fbb.CreateVector<flatbuffers::Offset<fbAmmo::FB_AmmoReference>>(*refs) : 0;
  return fbAmmo::CreateFB_AmmoReferenceContainer(
      _fbb,
      refs__);
}

inline const fbAmmo::FB_AmmoReferenceContainer *GetFB_AmmoReferenceContainer(const void *buf) {
  return flatbuffers::GetRoot<fbAmmo::FB_AmmoReferenceContainer>(buf);
}

inline const fbAmmo::FB_AmmoReferenceContainer *GetSizePrefixedFB_AmmoReferenceContainer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbAmmo::FB_AmmoReferenceContainer>(buf);
}

inline const char *FB_AmmoReferenceContainerIdentifier() {
  return "AMMR";
}

inline bool FB_AmmoReferenceContainerBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FB_AmmoReferenceContainerIdentifier());
}

inline bool VerifyFB_AmmoReferenceContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbAmmo::FB_AmmoReferenceContainer>(FB_AmmoReferenceContainerIdentifier());
}

inline bool VerifySizePrefixedFB_AmmoReferenceContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbAmmo::FB_AmmoReferenceContainer>(FB_AmmoReferenceContainerIdentifier());
}

inline const char *FB_AmmoReferenceContainerExtension() {
  return "bundle";
}

inline void FinishFB_AmmoReferenceContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAmmo::FB_AmmoReferenceContainer> root) {
  fbb.Finish(root, FB_AmmoReferenceContainerIdentifier());
}

inline void FinishSizePrefixedFB_AmmoReferenceContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbAmmo::FB_AmmoReferenceContainer> root) {
  fbb.FinishSizePrefixed(root, FB_AmmoReferenceContainerIdentifier());
}

}  // namespace fbAmmo

#endif  // FLATBUFFERS_GENERATED_AMMOREFERENCEFB_FBAMMO_H_
